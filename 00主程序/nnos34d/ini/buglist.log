==================================================================
					NNOS系统漏洞列表明细
==================================================================
==================================================================
[显存污染漏洞(KB00000000)][已修复]					命名：[薛定谔]
------------------------------------------------------------------
	[描述]显存初始化后，部分寄存器未初始化，导致显示器显示不可预知
		  的色块
------------------------------------------------------------------
	[解决方案]初级解决方案，绘图前用背景色覆盖整个显存;
			  终极解决方案，重写绘图函数，修复地址错误
------------------------------------------------------------------
	[发现者]年年软件	[发现日期]2019.3.6 		[修复日期]2019.3.7
==================================================================
==================================================================
[中断处理器无响应漏洞(KB00000001)][已修复]			命名：[梦魇]
------------------------------------------------------------------
	[描述]中断处理器无响应，键盘不可用。
------------------------------------------------------------------
	[解决方案]终极解决方案，修完内核中断描述符错误
------------------------------------------------------------------
	[发现者]年年软件 [发现日期]2019.3.8 		[修复日期]2019.3.9
==================================================================
========================[NNOS0.10f]================================
[中断处理崩溃无限重启漏洞(KB00000002)][已修复]		命名：[黄先生]
------------------------------------------------------------------
	[描述]开机无限重启。此漏洞影响大部分机器，少部分机器正常运行。
------------------------------------------------------------------
	[原因分析]gdtigt.c中initGdtIdt()函数初始化GDT、IDT失败。
			  初始化过程中，GDI和IDT的参数范围传输错误，造成0.10f
			  版本后IDT地址空间不足，增加鼠标中断后，无法注册中断
			  处理器inthandler27，导致针对PIC0_IRQ7的中断处理补丁
			  失效，造成系统在开机后自动产生IRQ7中断的机器上启动
			  失败，无限重启。
------------------------------------------------------------------
	[解决方案]已修正gdtigt.c中initGdtIdt()函数的GDT、IDT地址范围数
			  据。无限重启漏洞已成功修复，在qemu虚拟机bochs虚拟机、
			  VM虚拟机上均测试正常。
------------------------------------------------------------------
	[发现者]年年软件   [发现日期]2019.3.11    [修复日期]2019.3.23
==================================================================
========================[NNOS0.16i]===============================
[缓冲区溢出漏洞(KB00000003)][已修复]		  		命名：[待命名]
------------------------------------------------------------------
	[描述]开机后3秒，系统失去响应。
------------------------------------------------------------------
	[原因分析]经进一步检查确认，开机后使用鼠标，字符光标定时器的缓
			  区会被鼠标中断信号污染。在开发0.16i版本时发现此漏洞，
			  转而检查0.16h版本时，发现此漏洞在0.16h上同样存在，只
			  是表现形式不同。起初判定为定时器中断处理器存在逻辑错
			  误，但在随后的分析中，发现停用字符光标定时器后问题消
			  失，经过进一步调试分析，方才确定问题出在先进先出缓冲
			  区的put、get算法，该算法存在算术错误，导致潜在的缓冲
			  区溢出风险，此风险自FIFO缓冲区建立时便一直存在，在合
			  并缓冲区和提高中断处理器速度之前未表现出来。0.16h开始
			  爆发，0.16h的定时器中断处理器速度较慢，因此漏洞表现为
			  定时器缓冲区污染，晃动鼠标时所有定时器停止工作。0.16i
			  中，定时器中断处理器的速度大大提高，因此漏洞表现为鼠
			  标缓冲区污染，晃动鼠标数秒后，鼠标失去响应。
------------------------------------------------------------------
	[解决方案]已确认为FIFO缓冲区算法中算术错误导致的缓冲区溢出。已
			  修正相应的错误算法，修正后恢复正常，测试良好。
------------------------------------------------------------------
	[发现者]年年软件   [发现日期]2019.3.23    [修复日期]2019.3.24
==================================================================
========================[NNOS0.18f]===============================
[多任务死机漏洞(KB00000004)][已修复]		  		命名：[待命名]
------------------------------------------------------------------
	[描述]开机后即死机，但计时器有记录，说明并未立刻死机。
------------------------------------------------------------------
	[原因分析]在关闭多任务模块后，系统运行正常，可以确定该问题为
			  任务切换存在逻辑错误。经过对源代码的筛查和程序调试，
			  发现此问题是由定时器中断处理器中多任务自动切换定时器
			  标志信号声明范围错误引起的。该声明应为中断处理器的局
			  部变量，但却错误地声明为全局变量，造成开机后从主任务
			  向其他任务进行任务切换时，溢出的标志位无法满足切回条
			  件，在当前任务停滞，且系统无法再处理其他中断，鼠标、
			  键盘失去响应，系统死机。
------------------------------------------------------------------
	[解决方案]已确认为中断处理器多任务定时器标志信号声明范围错误，
			  已由全局变量修正为局部变量。修复后测试正常。
------------------------------------------------------------------
	[发现者]年年软件   [发现日期]2019.3.31    [修复日期]2019.3.31
==================================================================
========================[NNOS0.22a]===============================
[文件信息区内存污染漏洞(KB00000005)][已修复]	    命名：[待命名]
------------------------------------------------------------------
	[描述]控制台'type'(或'cat')命令异常，查看文件内容后，文件拓展
		  名被非法写入磁盘文件信息区的所有文件拓展名前。
------------------------------------------------------------------
	[原因分析]在查询时，定义了fileName数组，该数组之内存空间未经
			  操作系统管理，导致该空间与文件系统文件信息区文件拓
			  展所用内存地址相同。'type'命令执行时，需要将用户输
			  入转为代写，调用了convertToUppercase()函数，该函数
			  传入一个文件名字符数组首地址，对逐个字符进行操作，
			  进行该操作的同时，污染了文件信息区的所有文件拓展名
			  前三个字节，表现为用户输入的所查看文件的拓展名被写
			  入所有文件的拓展名之前。经进一步分析，确定真正问题
			  根源在于相关数组未初始化。
------------------------------------------------------------------
	[解决方案]初级解决方案，取消常规数组定义，使用字符指针，经过NNOS
			  的内存管理系统申请可控内存空间，从而防止内存污染。
			  终极解决方案，在数组定义时初始化置空值。
------------------------------------------------------------------
	[发现者]年年软件   [发现日期]2019.4.4    [修复日期]2019.4.4
==================================================================
========================[NNOS0.24d]===============================
[应用一般异常处理死循环(KB00000006)][已修复]	    命名：[待命名]
------------------------------------------------------------------
	[描述]分离系统程序段与应用程序段并增加应用一般异常中断处理程序
		  后，在控制台使用“run”运行可执行文件皆触发此异常并无限循环。
------------------------------------------------------------------
	[原因分析]经排查，IDT注册无问题。C中中断处理函数和run命令无问题。
			  最终确定问题出现在osfun.asm中API中断处理器_asm_sys_api
			  中，有一处寄存器地址数值书写错误，被扩大10倍。
------------------------------------------------------------------
	[解决方案]已修正上述数值错误，系统运行、程序运行测试正常。
------------------------------------------------------------------
	[发现者]年年软件   [发现日期]2019.4.9    [修复日期]2019.4.9
==================================================================
========================[NNOS0.26a]===============================
[内存释放溢出漏洞(KB00000007)][已修复]	           命名：[待命名]
------------------------------------------------------------------
	[描述]应用程序调用内存释放API时，内存管理系统的内存释放函数导
		  导致系统崩溃。
------------------------------------------------------------------
	[原因分析]已确定内存释放算法存在逻辑错误，但未确定错误所在。
------------------------------------------------------------------
	[解决方案]初级解决方案，为内存释放算法添加补丁算法，暂时消除此
			  漏洞的外显表现。待日后重写内存释放算法，彻底修复。
------------------------------------------------------------------
	[发现者]年年软件   [发现日期]2019.4.11    [修复日期]2019.4.15
==================================================================
========================[NNOS0.26f]===============================
[应用程序内存段访问异常(KB00000008)][已修复]	    命名：[待命名]
------------------------------------------------------------------
	[描述]此漏洞为KB00000007之根源。磁盘中位于测试用应用程序
		  helwin03.nex之后的所有应用程序均无法正常运行。首次运行其
		  他应用程序甲，在不扩充API的情况下测试正常，紧接着运其他应
		  用程序乙，则乙会出发一般保护异常无法运行。扩充API则甲、乙
		  皆无法运行，并无限循环、写满内存，导致系统崩溃。
------------------------------------------------------------------
	[原因分析]最初怀疑内存分配与释放算法问题，但重写算法后，问题仍
			  存在。然后检查了GDT和IDT相关函数，未发现致命漏洞。在
			  多次调试、修改无果的情况下，观察控制台文件系统中
			  helwin03的大小发现为12504字节，远远超出预期正常大小。
			  经排查，发现该应用程序的存在一个本应废弃的全局缓冲区，
			  该缓冲区脱离系统内存管理，导致任务切换时不断随机占用
			  系统内存空间，并覆盖其他程序段，造成该程序之后的所有
			  应用程序无法正常运行。且测试环境下，应用程序被写入软
			  盘镜像，该异常程序之文件所占空间与其他文件相加超出软
			  盘最大容量，导致处于列表尾部的应用程序根本无法完整写
			  入，同样造成异常。
			  经进一步排查，找到问题根源。文件管理系统file.c中的
			  FAT解码算法存在算术错误，镜像数据偏移被扩大10倍。
------------------------------------------------------------------
	[解决方案]初级解决方案，已修复该应用程序错误。
			  中级解决方案，已修复FAT解码的算术错误，系统测试正常。
			  终极解决方案，后续开发中将引入LDT，以杜绝应用程序之
			  间和应用程序对操作系统的干扰、破坏。
------------------------------------------------------------------
	[发现者]年年软件   [发现日期]2019.4.15    [修复日期]2019.4.19
==================================================================