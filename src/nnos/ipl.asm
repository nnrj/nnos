;nnos_ipl（启动程序加载器）

;===================NNOS-06f======================
;#[功能更新]中级读盘测试，读到第18扇区的下一个扇区,
;           即磁盘反面的C0-H1-S1，从0xa400读入，
;           按顺序读到C0-H1-S18,再继续读盘到
;           C9-H1-S18共10个柱面(C=cylinder，柱面;
;           H=head,磁头,S=sector,扇区)。
;#[主要改动]程序段next扩充
;#[运行流程]启动装载器→程序核心入口→读盘→显示信息
;#[运行结果]读取磁盘达到第10柱面，填充内存180KB
;#[备注]本引导区(启动区)不再更新版本号，转移到nnos
;=================================================
CYLS_MAX EQU 30     ;定义最大装载柱面号常数CYLS_MAX,最大装载到第10柱面

	ORG 0x7c00	;指明程序装载地址。#主引导扇区拷贝到内存0x7c00(与软盘拷贝位置一致)。0x00007c000~0x00007dff:启动分区装载地址(硬规定，IBM)
                ;FAT12文件系统，引导程序(占512B,起C0-H0-S1)、FAT分配表1(占4068B,0-0-2~0-0-10)，FAT分配表2(0-0-11~1-0-1)，根目录、文件数据区
;描述用于标准FAT12格式的软盘(FAT12格式软盘标准引导代码)
	JMP	entry           ;跳转到程序核心入口
	DB  0x90	        ;[0]跳转指令（相当于"JMP 0x4e”，亦可用短跳<如jump short start>后加一个nop空指令补足3字节）
	DB  "NNOS_IPL"		;[3]引导区名称（可自定义，须为8字节，不满8字节用空格填充）
	DW  512				;[11]每个扇区<sector>的大小（单位为字节，默认512字节。逻辑<线性>扇区经转换可得CHS磁盘参数）
	DB  1				;[13]簇<cluster>大小(单位为扇区，默认为1个扇区，可通过调整簇大小调整分区容量，可取1,2,4,8,16,32,64和128。FAT12只能管理4096簇，最大2M空间）
	DW  1				;[14]FAT起始位置(一般从第1个扇区开始，亦即保留扇区数为1，保留1个扇区作为引导扇区）
	DB	2				;[16]FAT表记录数(默认为2，两表内容相同，FAT1出错可用FAT2来恢复）
	DW	224				;[17]根目录大小（即根目录下目录/文件最大数量，默认为224个。目录/文件名占用32B，根目录大小为224*32=7168B=7KB）
	DW	2880			;[19]逻辑扇区总数（即该磁盘大小，默认为2880<0x0b40>个扇区)
	DB	0xf0			;[21]磁盘类型标识符(默认为0xf0，表示3.5寸高密度软盘。0f8h表示硬盘。)
	DW	9				;[22]FAT长度（默认为9个扇区，操作系统计算根目录所在扇区=FAT表数*FAT表所占扇区数+隐藏扇区数；用户数据开始位置=根目录扇区位置+根目录所占扇区，FAT12下为224*32/512）
	DW	18				;[24]每个磁道<track>扇区数(默认为18，软盘默认值为18，此处须为18)
	DW	2				;[26]磁头数(指磁盘面数，软盘为2面，正反面各一个，此处须为2)
	DD	0				;[28]隐藏扇区数(默认为0。是引导扇区之前的隐藏扇区，此字段参与根目录、用户数据位置计算)
	DD	0			    ;[32]分区/磁盘逻辑扇区总数（大于65536使用此字段表示，否则此段置0，用偏移19处的字段来表示）
	DB	0,0,0x29		;[36]物理驱动器号、[37]未使用位、[38]扩展引导标志
	DD	0xffffffff		;[39]卷标号码（卷序列号、磁盘号，默认为0）
	DB	"NNOS_OS    "	;[43]磁盘名称(卷标、卷名称，必须为11字节，不足则以空格填充)
	DB	"FAT12   "		;[54]文件系统类型(必须为8字节，不足则以空格填充，操作系统并不使用此字段识别磁盘之文件系统)
	;#RESB	18			;[62]空出18字节(待用,引导代码，由偏移0字节处的跳转而来)				
	TIMES   18  DB 0    ;[62]#[兼容nasm][代]
	
;程序核心
	entry:				;程序核心入口程序段，由开头JMP跳入，相当于JMP 0x7c50b 
        MOV AX,0		;初始化寄存器。#AX为通用寄存器(通常用作累加器)，SS为堆栈段寄存器,DS为数据段寄存器，ES为附加段寄存器
		MOV SS,AX		;AX、SS、DS、ES全部初始化为0
		MOV	SP,0x7c00 	;栈顶指针指向0x7c00
		MOV	DS,AX       ;省略段寄存器会把DS作为默认段寄存器,MOV CX;[1234]相当于MOV CX,[DS:1234],即MOV CX,[DS*16+1234]。故DS须初始化为0。
		;MOV	ES,AX
		
;读磁盘
		MOV AX,0x0820   ;地址0x820写入给AX,再赋值给ES。无法直接赋值给ES寄存器(设计原因，硬规定)，0x7c00~0x7dff为启动区，0x7e00~0x9fbff供操作系统任意使用
		MOV ES,AX       ;寄存器AX赋值给寄存器ES，偏移量为0x0820;BX为0。从内存0x0820处开始装载读取的硬盘数据，磁盘第2扇区装载在内存0x0820处
		MOV CH,0        ;磁盘第0个柱面(自外向内递增，软盘共80个柱面,cylinder)，柱面编号从0开始
		MOV DH,0        ;磁盘第0个磁头(磁头0正面、磁头1反面)，磁头编号从0开始
		MOV CL,2        ;第2个扇区(软盘等分为18个扇区,sector)，扇区编号从1开始
readloop:               ;循环读取下一个扇区的开始处，读盘无错、尚未读到第18扇区时读完一个扇区会回到此处继续读下一个扇区	
		MOV	SI,0		;读盘失败次数的SI初始为0，开始读新的扇区
retry:                  ;retry程序段，若读盘失败，则重试直至满5次。
		MOV AH,0X02     ;读盘，AH=0x02为读盘
		MOV AL,1        ;读取1个扇区，AL用于指定扇区号
		MOV BX,0        ;基址寄存器置0，ES:BX 为缓冲地址，校验及寻道时不使用
		MOV DL,0x00     ;驱动器A，DL用于指定驱动器号。此句和下句之间若改为AL=17即调用磁盘BIOS的函数来连续读取18个扇区，因软盘无法跨越多个磁道，故不适用。
		INT 0x13        ;中断，调用磁盘BIOS(硬规定)，至此若无错则读盘成功。此语句执行结果影响CF标志位，无错置1，有错置0。
        ;JNC oky        ;没出错则跳转到okey（亦可直接跳转到fin不显示信息)，JNC判断进位标志CF，为0时跳转
        JNC next        ;无错则跳至next程序段，从而继续读盘到第18扇区
        ADD SI,1        ;若读盘失败，则上一句不会跳转，继续执行到此处，将出错记录数加1
        CMP SI,5        ;比较SI与5，比较结果影响零标志寄存器的值;#ZF=1(相等)，ZF=0(不相等），SF=1(左<右)，[ZF,SF]=[1,1](左<=右)，SF=0(左>=右)，[ZF,SF]=[0,0](左>右)
        JAE error       ;SI中的重试次数比较结果与5相等时，跳转到error。JAE(jump if above or equal)指令在SI>=5时跳转。
		;JC  error      ;出错时跳转到error段，JC(jump if carry)，进位标志(CF,carry flag)为1时跳转
        ;JNC oky        ;不出错继续跳转到oky段运行,oky段在显示器上显示信息,oky已更名为showmsg
        MOV AH,0x00     ;读盘出错但出错次数小于无时，JNC、JAE处都未跳转，继续执行此指令，将寄存器AH重置为0，复位
        MOV DL,0x00     ;驱动器A
        INT 0x13        ;中断，系统复位，重置驱动器，复位软盘状态
        JMP retry       ;跳转到retry从头重新尝试读盘 
next:                   ;next程序段，若重试次数小于5、读盘无错，则跳转到此处，继续读盘到第18扇区
        MOV AX,ES       ;当前段地址(实际地址位ES*16+BX)赋值给累加器AX
        ADD AX,0x0020   ;将当前地址后移0x0020（00100000即32,32*16+0=512，为一个扇区大小）存入累加器AX，即AX=AX+0x0020。这两句可直接写为ADD BX,512
        MOV ES,AX       ;将AX中的新地址赋值给ES，注意不能直接ADD ES,0x020，段寄存器ES不能用作累加器
        ADD CL,1        ;进位标志CL增加1，记录当前读到的扇区，作为是否读到第18扇区的判断参数
        CMP CL,18       ;将进位标志CL的值与18比较比较结果影响ZF、SF标志寄存器的值，根据ZF的值可判断是否读到第18扇区
        JBE readloop    ;若CL<=18,即[ZF,SF]=[1,1](左<=右)，则尚未读到第18扇区，跳转至readloop从而循环读取下一个扇区，JBE(jump if bleow or equl)，小于等于则跳转
        MOV CL,1        ;进位标志重置为1，用于记录此柱面所读扇区数(每个磁道有18个扇区)
        ADD DH,1        ;磁头号加1，软盘只有两个磁头，C0-H0-S18的下一个扇区为C0-H1-S1（每个磁道最大18个扇区，扇区编号从1开始）
        CMP DH,2        ;将磁头号与2比较，比较结果影响ZF和SF
        JB  readloop    ;若DH<2，即磁头号小于2，亦即SF=1时，跳转到readloop，继续读此柱面的反面的第一个扇区即磁头1的第一个扇区（C0-H1-S1）
        MOV DH,0        ;读完C0柱面的反面后，继续读正面，磁头号0
        ADD CH,1        ;柱面号加1，读完第0号柱面，继续读第1号柱面，以此类推
        CMP CH,CYLS_MAX ;将当前柱面号与最大装载柱面号常数CYLS_MAX比较，比较结果影响ZF和SF
        JB  readloop    ;柱面号小于最大装载柱面号常数时跳转到readloop继续读下一个柱面/扇区
        JMP showmsg     ;读盘完毕显示系统信息
        ;改进思路：合并循环，读盘扇区交替
;        JMP start
start:                  ;start程序段，启动NNOS操作系统  
        MOV [0x0ff0],CH ;将磁盘装载内容结束地址存入内存0x0ff0处，以供操作系统使用
        JMP 0xc200      ;跳转难道系统装载起始位置（软盘文件名保存于0x2600以后，文件内容在0x4200以后，启动区位于内存0x8000，则系统装载到内存0x8000+0x4200=0xc4200）
;        JMP showmsg
        
;fin                    ;待机
    ;#HLT                 ;cpu停止动作，进入待机状态，省电
    ;#JMP fin             ;无限循环    

;error:
    ;#MOV SI,msg 		;msg程序段首地址写入SI,相当于JMP 0x7c74
	
    fin:				;结束程序段
		HLT				;CPU停止动作(进入待机状态)，等待指令(只要外部发生变化，如键盘、鼠标事件，CUP就会苏醒)，不加也可以，加了省电
		JMP fin			;无限循环，从而使得显示器上稳定显示文字
        
    error:              ;错误程序段，读盘出错时跳转到此处
        MOV SI,errormsg ;将errormsg的地址写入寄存器SI
    
    showmsg:                ;正常程序段，读盘正常时跳转到此处
        MOV SI,msg      ;将msg的地址写入寄存器SI
        JMP start
	
	putloop:            ;循环打印程序段，在屏幕上稳定输出信息
		MOV AL,[SI]		;寄存器间接寻址，将SI中所存内存地址之内容写入AL。#AL为累加器，SI为通用寄存器，此处用于间址
		ADD SI,1		;给SI加1,间接寻址寄存器+1，指向下一个地址
		CMP	AL,0		;用AL-0，得出比较结果，设置标志位ZF，控制循环,结果为0，ZF置1。#AL为通用寄存器AX的低8位，AH则位高8位，拆为两个寄存器使用		
		JE fin			;判断ZF，若ZF=1(AL与0的比较结果相等)则跳转到fin结束程序段，否则不跳转继续执行下一条指令。相当于：if(AL==0){goto fin;}
		MOV AH,0x0e		;指定一个要显示的文字,文字的ASCII码写入AH
		MOV BX,15		;指定字符颜色,00001111，不闪烁、黑底、高亮、白色，写入BX，BX为基址寄存器
		INT 0x10		;中断，调用显卡BIOS,INT指令引发中断，中断类型码为0x10，代表由显卡BIOS对显示器所提供的服务程序
		JMP putloop		;跳转回开头，循环显示出所有字符
        

    errormsg:           ;错误信息程序段
        DB 0x0a,0x0a                            ;2个换行
        DB "NNOS-IPL:Loaderror.[0X060101001]"   ;错误信息
        DB 0x0a                                 ;换行
        DB 0     

	msg:						                ;信息程序段(要在显示器上显示的信息)
		DB 0x0a,0x0a							;2个换行,0x0A为LF的十六进制Ascii码
		DB "============NNOS============"
		DB 0x0a
		DB "|  WELCOME TO NNOS WORLD   |"
		DB 0x0a
		DB "|==========================|"	;欢迎界面信息
		DB 0x0a								;换行
		DB "|File System:FAT12         |"	;版本信息、平台信息
		DB 0x0a					
		DB "|Version:0.6i | Based:80x86|"	;文件系统信息
		DB 0x0a					
		DB "|Company:nnrj | Author:LDX |"	;公司信息、开发者信息
		DB 0x0a
		DB "|Email:tianhehechu@qq.com  |" 	;开发者邮箱
		DB 0x0a
		DB "|Update Date:2019-3-6      |" 	;发行日期	
		DB 0x0a
		DB "=====CREATED IN CHINA======="	;中国创造			
		DB 0x0a
		DB 0
		
        ;#RESB 0x1fe-$				;填写0x00，直到0x001fe,nask特有语法
        TIMES 0x1fe-($-$$)  DB 0   	;#[兼容nasm][代]。填写0x00[nasm版]，填写到510字节，末2位留给结束标志
        DB 0x55,0xaa				;结束标志