[FORMAT "WCOFF"]
[INSTRSET "i486p"]
[OPTIMIZE 1]
[OPTION 1]
[BITS 32]
	EXTERN	_initGdtIdt
	EXTERN	_initPIC
	EXTERN	_io_sti
	EXTERN	_initFIFOBuffer32
	EXTERN	_initPIT
	EXTERN	_initKeyboardCMD32
	EXTERN	_enableMouse32
	EXTERN	_io_out8
	EXTERN	_initMemeryManager
	EXTERN	_memeryFree
	EXTERN	_initPalette
	EXTERN	_shtctl_init
	EXTERN	_initTaskList
	EXTERN	_taskRun
	EXTERN	_memeryAlloc4k
	EXTERN	_readFAT
	EXTERN	_file_search2
	EXTERN	_loadFile
	EXTERN	_memeryFree4k
	EXTERN	_sheet_alloc
	EXTERN	_sheet_setbuf
	EXTERN	_initDesk
	EXTERN	_wordsDraw8
	EXTERN	_timerAlloc
	EXTERN	_initTimer
	EXTERN	_setTimer
	EXTERN	_initMouseCursor8
	EXTERN	_sheet_slide
	EXTERN	_sheet_updown
	EXTERN	_putFIFOBuffer32
	EXTERN	_windowDraw8
	EXTERN	_sprintf
	EXTERN	_sheet_refresh
	EXTERN	_getFIFOBufferStatus32
	EXTERN	_io_cli
	EXTERN	_getFIFOBuffer32
	EXTERN	_labelDraw
	EXTERN	_decodeMouse
	EXTERN	_asm_end_app
	EXTERN	_sysprintl
	EXTERN	_KEY_TABLE
	EXTERN	_KEY_TABLE_CTRL
	EXTERN	_waitKBCReady
	EXTERN	_taskSleep
	EXTERN	_fonbase
	EXTERN	_taskAlloc
	EXTERN	_createWindow
	EXTERN	_consoleTask
	EXTERN	_taskNow
	EXTERN	_sheet_free
[FILE "bootpack.c"]
[SECTION .data]
_table_rgb:
	DB	0
	DB	0
	DB	0
	DB	-1
	DB	0
	DB	0
	DB	0
	DB	-1
	DB	0
	DB	0
	DB	0
	DB	-1
	DB	-1
	DB	-1
	DB	0
	DB	-1
	DB	0
	DB	-1
	DB	0
	DB	-1
	DB	-1
	DB	-1
	DB	-1
	DB	-1
	DB	-58
	DB	-58
	DB	-58
	DB	-124
	DB	0
	DB	0
	DB	0
	DB	-124
	DB	0
	DB	0
	DB	0
	DB	-124
	DB	-124
	DB	-124
	DB	0
	DB	-124
	DB	0
	DB	-124
	DB	0
	DB	-124
	DB	-124
	DB	-124
	DB	-124
	DB	-124
	DB	0
	DB	91
	DB	-98
	DB	0
	DB	120
	DB	-41
	DB	0
	DB	66
	DB	118
	DB	-1
	DB	-1
	DB	-2
	DB	-31
	DB	-31
	DB	-31
	DB	16
	DB	16
	DB	16
	DB	51
	DB	51
	DB	51
	DB	-39
	DB	-39
	DB	-39
	DB	-24
	DB	17
	DB	35
	DB	-16
	DB	-16
	DB	-16
	DB	56
	DB	-50
	DB	47
_CUSOR_GRAPH:
	DB	"**00000000000000"
	DB	"*1*0000000000000"
	DB	"*111*00000000000"
	DB	"*11111*000000000"
	DB	"*1111111*0000000"
	DB	"*111111111*00000"
	DB	"*111111111110000"
	DB	"*111111111111**0"
	DB	"*1111111111111*",0x00
	DB	"*11111111*******"
	DB	"*111111111*00000"
	DB	"*1111*11111*0000"
	DB	"*111*0*11111*000"
	DB	"*11*000*1111*000"
	DB	"*1*00000*111*000"
	DB	"**0000000****000"
_KEY_TABLE:
	DB	0
	DB	0
	DB	49
	DB	50
	DB	51
	DB	52
	DB	53
	DB	54
	DB	55
	DB	56
	DB	57
	DB	48
	DB	45
	DB	61
	DB	0
	DB	0
	DB	81
	DB	87
	DB	69
	DB	82
	DB	84
	DB	89
	DB	85
	DB	73
	DB	79
	DB	80
	DB	91
	DB	93
	DB	0
	DB	0
	DB	65
	DB	83
	DB	68
	DB	70
	DB	71
	DB	72
	DB	74
	DB	75
	DB	76
	DB	59
	DB	39
	DB	96
	DB	0
	DB	47
	DB	90
	DB	88
	DB	67
	DB	86
	DB	66
	DB	78
	DB	77
	DB	44
	DB	46
	DB	47
	DB	0
	DB	42
	DB	0
	DB	32
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	55
	DB	56
	DB	57
	DB	45
	DB	52
	DB	53
	DB	54
	DB	43
	DB	49
	DB	50
	DB	51
	DB	48
	DB	46
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	92
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	92
	DB	0
	DB	0
_KEY_TABLE_CTRL:
	DB	0
	DB	0
	DB	33
	DB	64
	DB	35
	DB	36
	DB	37
	DB	94
	DB	38
	DB	42
	DB	40
	DB	41
	DB	95
	DB	43
	DB	0
	DB	0
	DB	81
	DB	87
	DB	69
	DB	82
	DB	84
	DB	89
	DB	85
	DB	73
	DB	79
	DB	80
	DB	123
	DB	125
	DB	0
	DB	0
	DB	65
	DB	83
	DB	68
	DB	70
	DB	71
	DB	72
	DB	74
	DB	75
	DB	76
	DB	58
	DB	34
	DB	96
	DB	0
	DB	47
	DB	90
	DB	88
	DB	67
	DB	86
	DB	66
	DB	78
	DB	77
	DB	60
	DB	62
	DB	63
	DB	0
	DB	42
	DB	0
	DB	32
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	55
	DB	56
	DB	57
	DB	45
	DB	52
	DB	53
	DB	54
	DB	43
	DB	49
	DB	50
	DB	51
	DB	48
	DB	46
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	95
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	124
	DB	0
	DB	0
_ControlBox:
	DD	5
	DD	5
	DD	65
	DD	100
	DB	0
	DB	"body",0x00
	RESB	3
	RESB	3
	DD	5
	DD	5
	DD	100
	DD	15
	DB	17
	DB	"caption",0x00
	RESB	3
	DD	-1
	DD	0
	DD	0
	DD	0
	DB	0
	DB	"EndFlag",0x00
	RESB	3
_NormalBox:
	DD	5
	DD	5
	DD	75
	DD	65
	DB	19
	DB	"body",0x00
	RESB	3
	RESB	3
	DD	5
	DD	5
	DD	75
	DD	15
	DB	17
	DB	"caption",0x00
	RESB	3
	DD	-1
	DD	0
	DD	0
	DD	0
	DB	0
	DB	"EndFlag",0x00
	RESB	3
_InformationBox:
	DD	5
	DD	5
	DD	80
	DD	35
	DB	19
	DB	"body",0x00
	RESB	3
	RESB	3
	DD	5
	DD	5
	DD	80
	DD	15
	DB	17
	DB	"caption",0x00
	RESB	3
	DD	-1
	DD	0
	DD	0
	DD	0
	DB	0
	DB	"EndFlag",0x00
	RESB	3
_textBox:
	DD	3
	DD	2
	DD	81
	DD	2
	DB	15
	DB	"caption",0x00
	RESB	3
	DD	5
	DD	5
	DD	80
	DD	15
	DB	17
	DB	"caption",0x00
	RESB	3
	DD	2
	DD	2
	DD	2
	DD	36
	DB	15
	DB	"caption",0x00
	RESB	3
	DD	2
	DD	37
	DD	81
	DD	37
	DB	7
	DB	"caption",0x00
	RESB	3
	DD	82
	DD	2
	DD	82
	DD	37
	DB	7
	DB	"caption",0x00
	RESB	3
	DD	4
	DD	3
	DD	80
	DD	3
	DB	0
	DB	"caption",0x00
	RESB	3
	DD	3
	DD	3
	DD	3
	DD	35
	DB	0
	DB	"caption",0x00
	RESB	3
	DD	3
	DD	36
	DD	80
	DD	36
	DB	8
	DB	"caption",0x00
	RESB	3
	DD	81
	DD	3
	DD	81
	DD	36
	DB	8
	DB	"caption",0x00
	RESB	3
	DD	-1
	DD	0
	DD	0
	DD	0
	DB	0
	DB	"EndFlag",0x00
	RESB	3
	GLOBAL	_CX
	ALIGNB	4
_CX:
	DD	40
	GLOBAL	_CY
	ALIGNB	4
_CY:
	DD	120
LC0:
	DB	"Memery Check",0x00
	ALIGNB	4
LC1:
	DD	3
	DD	50
	DD	5
	DD	120
	DD	55
	DD	LC0
	DB	0
	DB	19
	RESB	2
	DD	1
	DD	1
LC2:
	DB	"Device Code",0x00
	ALIGNB	4
LC3:
	DD	3
	DD	180
	DD	10
	DD	200
	DD	75
	DD	LC2
	DB	0
	DB	19
	RESB	2
	DD	1
	DD	1
LC4:
	DB	"HZK16.fnt",0x00
LC5:
	DB	"NNOS 0.34c",0x00
LC6:
	DB	"Memery:%dMB",0x00
LC7:
	DB	"Free:%dKB",0x00
LC15:
	DB	"3(sec)",0x00
LC14:
	DB	"10(sec)",0x00
LC11:
	DB	"(%3d, %3d)",0x00
LC12:
	DB	"Type:PS/2 Mouse",0x00
LC13:
	DB	"[ML]Mouse closed the app.",0x0A,0x00
LC8:
	DB	"KeyCode:%02X",0x00
LC9:
	DB	"Type:PS/2 Keyboard",0x00
LC10:
	DB	0x0A,"[F4]Forced kill the App.",0x0A,0x00
[SECTION .text]
	GLOBAL	_NNOSMain
_NNOSMain:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	MOV	ESI,LC1
	PUSH	EBX
	LEA	EDI,DWORD [-1356+EBP]
	SUB	ESP,1484
	MOV	EBX,2
	MOVSX	EAX,WORD [4084]
	CLD
	LEA	ECX,DWORD [-16+EAX]
	MOV	EAX,ECX
	CDQ
	IDIV	EBX
	MOV	DWORD [-1440+EBP],EAX
	MOVSX	EAX,WORD [4086]
	LEA	ECX,DWORD [-44+EAX]
	MOV	EAX,ECX
	CDQ
	IDIV	EBX
	MOV	DWORD [-1448+EBP],EAX
	LEA	EBX,DWORD [-44+EBP]
	MOV	EAX,9
	MOV	ECX,EAX
	REP
	MOVSD
	MOV	ECX,EAX
	LEA	EDI,DWORD [-1404+EBP]
	MOV	ESI,LC3
	REP
	MOVSD
	MOV	DWORD [-1456+EBP],0
	MOV	AL,BYTE [4081]
	SAR	AL,4
	MOV	EDI,EAX
	AND	EDI,7
	MOV	DWORD [-1460+EBP],EDI
	MOV	DWORD [-1464+EBP],-1
	MOV	DWORD [-1468+EBP],-1
	MOV	DWORD [-1472+EBP],-1
	MOV	DWORD [-1476+EBP],0
	MOV	DWORD [-1484+EBP],1
	CALL	_initGdtIdt
	CALL	_initPIC
	CALL	_io_sti
	LEA	EAX,DWORD [-636+EBP]
	PUSH	0
	PUSH	128
	PUSH	EAX
	PUSH	EBX
	CALL	_initFIFOBuffer32
	MOV	DWORD [4076],EBX
	CALL	_initPIT
	PUSH	256
	PUSH	EBX
	CALL	_initKeyboardCMD32
	LEA	EAX,DWORD [-1052+EBP]
	PUSH	EAX
	PUSH	512
	PUSH	EBX
	CALL	_enableMouse32
	ADD	ESP,36
	PUSH	248
	PUSH	33
	CALL	_io_out8
	PUSH	239
	PUSH	161
	CALL	_io_out8
	LEA	EAX,DWORD [-764+EBP]
	PUSH	0
	PUSH	32
	PUSH	EAX
	LEA	EAX,DWORD [-76+EBP]
	PUSH	EAX
	CALL	_initFIFOBuffer32
	ADD	ESP,32
	PUSH	3932160
	CALL	_initMemeryManager
	PUSH	647168
	PUSH	4096
	PUSH	3932160
	CALL	_memeryFree
	MOV	EAX,DWORD [3932176]
	SUB	EAX,4194304
	PUSH	EAX
	PUSH	4194304
	PUSH	3932160
	CALL	_memeryFree
	CALL	_initPalette
	MOVSX	EAX,WORD [4086]
	PUSH	EAX
	MOVSX	EAX,WORD [4084]
	PUSH	EAX
	PUSH	DWORD [4088]
	PUSH	3932160
	CALL	_shtctl_init
	ADD	ESP,44
	PUSH	3932160
	MOV	DWORD [-1420+EBP],EAX
	CALL	_initTaskList
	PUSH	2
	PUSH	1
	PUSH	EAX
	MOV	DWORD [-1436+EBP],EAX
	MOV	DWORD [-20+EBP],EAX
	CALL	_taskRun
	MOV	EDX,DWORD [-1436+EBP]
	MOV	EAX,DWORD [-1420+EBP]
	MOV	DWORD [4068],EAX
	MOV	BYTE [188+EDX],0
	PUSH	764832
	PUSH	3932160
	CALL	_memeryAlloc4k
	PUSH	11520
	PUSH	3932160
	MOV	EBX,EAX
	CALL	_memeryAlloc4k
	ADD	ESP,32
	MOV	ESI,EAX
	PUSH	1049088
	PUSH	EAX
	CALL	_readFAT
	PUSH	224
	PUSH	1058304
	PUSH	LC4
	CALL	_file_search2
	ADD	ESP,20
	TEST	EAX,EAX
	JE	L2
	PUSH	1064448
	PUSH	ESI
	PUSH	EBX
	PUSH	DWORD [28+EAX]
	MOVZX	EAX,WORD [26+EAX]
	PUSH	EAX
	CALL	_loadFile
	ADD	ESP,20
L3:
	MOV	DWORD [4072],EBX
	PUSH	11520
	PUSH	ESI
	LEA	ESI,DWORD [-44+EBP]
	PUSH	3932160
	CALL	_memeryFree4k
	PUSH	DWORD [-1420+EBP]
	CALL	_sheet_alloc
	MOVSX	EDX,WORD [4086]
	MOV	DWORD [-1428+EBP],EAX
	MOVSX	EAX,WORD [4084]
	IMUL	EAX,EDX
	PUSH	EAX
	PUSH	3932160
	CALL	_memeryAlloc4k
	PUSH	-1
	MOV	DWORD [-1424+EBP],EAX
	MOVSX	EAX,WORD [4086]
	PUSH	EAX
	MOVSX	EAX,WORD [4084]
	PUSH	EAX
	PUSH	DWORD [-1424+EBP]
	PUSH	DWORD [-1428+EBP]
	CALL	_sheet_setbuf
	ADD	ESP,44
	MOVSX	EAX,WORD [4086]
	PUSH	EAX
	MOVSX	EAX,WORD [4084]
	PUSH	EAX
	PUSH	DWORD [-1424+EBP]
	CALL	_initDesk
	MOV	EAX,DWORD [-1440+EBP]
	PUSH	LC5
	SUB	EAX,30
	PUSH	7
	PUSH	DWORD [-1448+EBP]
	PUSH	EAX
	MOVSX	EAX,WORD [4084]
	PUSH	EAX
	PUSH	DWORD [-1424+EBP]
	CALL	_wordsDraw8
	MOV	EAX,DWORD [-1448+EBP]
	ADD	ESP,36
	DEC	EAX
	PUSH	LC5
	PUSH	0
	PUSH	EAX
	MOV	EAX,DWORD [-1440+EBP]
	SUB	EAX,31
	PUSH	EAX
	MOVSX	EAX,WORD [4084]
	PUSH	EAX
	PUSH	DWORD [-1424+EBP]
	CALL	_wordsDraw8
	PUSH	DWORD [-1420+EBP]
	CALL	_openConsole
	MOV	DWORD [-1480+EBP],EAX
	CALL	_timerAlloc
	PUSH	10
	MOV	EBX,EAX
	PUSH	ESI
	PUSH	EAX
	CALL	_initTimer
	ADD	ESP,40
	PUSH	1000
	PUSH	EBX
	CALL	_setTimer
	CALL	_timerAlloc
	PUSH	3
	PUSH	ESI
	MOV	EBX,EAX
	PUSH	EAX
	LEA	ESI,DWORD [-1356+EBP]
	CALL	_initTimer
	PUSH	300
	PUSH	EBX
	LEA	EBX,DWORD [-1308+EBP]
	CALL	_setTimer
	PUSH	DWORD [-1420+EBP]
	CALL	_sheet_alloc
	ADD	ESP,32
	PUSH	99
	MOV	DWORD [-1432+EBP],EAX
	PUSH	16
	PUSH	16
	PUSH	EBX
	PUSH	EAX
	CALL	_sheet_setbuf
	PUSH	99
	PUSH	EBX
	LEA	EBX,DWORD [-76+EBP]
	CALL	_initMouseCursor8
	PUSH	0
	PUSH	0
	MOV	EDX,DWORD [-1448+EBP]
	MOV	EAX,DWORD [-1440+EBP]
	MOV	DWORD [-1412+EBP],EDX
	PUSH	DWORD [-1428+EBP]
	MOV	DWORD [-1408+EBP],EAX
	CALL	_sheet_slide
	ADD	ESP,40
	PUSH	DWORD [-1412+EBP]
	PUSH	DWORD [-1408+EBP]
	PUSH	DWORD [-1432+EBP]
	CALL	_sheet_slide
	PUSH	0
	PUSH	DWORD [-1428+EBP]
	CALL	_sheet_updown
	PUSH	2
	PUSH	DWORD [-1432+EBP]
	CALL	_sheet_updown
	PUSH	237
	PUSH	EBX
	CALL	_putFIFOBuffer32
	ADD	ESP,36
	PUSH	DWORD [-1460+EBP]
	PUSH	EBX
	LEA	EBX,DWORD [-124+EBP]
	CALL	_putFIFOBuffer32
	MOV	ECX,9
	PUSH	0
	PUSH	0
	CLD
	SUB	ESP,36
	MOV	EDI,ESP
	REP
	MOVSD
	MOVSX	EAX,WORD [4084]
	PUSH	EAX
	PUSH	DWORD [-1424+EBP]
	CALL	_windowDraw8
	MOV	EAX,DWORD [3932176]
	SHR	EAX,20
	ADD	ESP,60
	PUSH	EAX
	PUSH	LC6
	PUSH	EBX
	CALL	_sprintf
	PUSH	EBX
	MOVSX	EAX,BYTE [-1332+EBP]
	PUSH	EAX
	MOV	EAX,DWORD [-1348+EBP]
	ADD	EAX,22
	PUSH	EAX
	MOV	EAX,DWORD [-1352+EBP]
	ADD	EAX,2
	PUSH	EAX
	MOVSX	EAX,WORD [4084]
	PUSH	EAX
	PUSH	DWORD [-1424+EBP]
	CALL	_wordsDraw8
	MOV	EAX,DWORD [3932180]
	SHR	EAX,10
	ADD	ESP,36
	PUSH	EAX
	PUSH	LC7
	PUSH	EBX
	CALL	_sprintf
	PUSH	EBX
	MOVSX	EAX,BYTE [-1332+EBP]
	PUSH	EAX
	MOV	EAX,DWORD [-1348+EBP]
	ADD	EAX,38
	PUSH	EAX
	MOV	EAX,DWORD [-1352+EBP]
	ADD	EAX,2
	PUSH	EAX
	MOVSX	EAX,WORD [4084]
	PUSH	EAX
	PUSH	DWORD [-1424+EBP]
	CALL	_wordsDraw8
	MOV	EDX,DWORD [-1352+EBP]
	MOV	ECX,DWORD [-1348+EBP]
	ADD	ESP,36
	MOV	EAX,ECX
	ADD	EAX,DWORD [-1340+EBP]
	INC	EAX
	PUSH	EAX
	MOV	EAX,EDX
	ADD	EAX,DWORD [-1344+EBP]
	INC	EAX
	PUSH	EAX
	PUSH	ECX
	PUSH	EDX
	PUSH	DWORD [-1428+EBP]
	CALL	_sheet_refresh
	ADD	ESP,20
L86:
	LEA	EBX,DWORD [-76+EBP]
	PUSH	EBX
	CALL	_getFIFOBufferStatus32
	POP	ECX
	TEST	EAX,EAX
	JLE	L17
	CMP	DWORD [-1464+EBP],0
	JS	L97
L17:
	LEA	EBX,DWORD [-44+EBP]
	CALL	_io_cli
	PUSH	EBX
	CALL	_getFIFOBufferStatus32
	POP	EDX
	TEST	EAX,EAX
	JE	L98
	PUSH	EBX
	CALL	_getFIFOBuffer32
	MOV	DWORD [-1416+EBP],EAX
	CALL	_io_sti
	POP	EAX
	CMP	DWORD [-1480+EBP],0
	JE	L20
	MOV	ECX,DWORD [-1480+EBP]
	CMP	DWORD [28+ECX],0
	JNE	L20
	MOV	EDI,DWORD [-1420+EBP]
	MOV	DWORD [-1480+EBP],0
	MOV	EAX,DWORD [16+EDI]
	CMP	EAX,1
	JE	L20
	MOV	EDX,DWORD [-1420+EBP]
	MOV	EAX,DWORD [16+EDX+EAX*4]
	PUSH	EAX
	MOV	DWORD [-1480+EBP],EAX
	CALL	_keywinOn
	POP	EAX
L20:
	MOV	EAX,DWORD [-1416+EBP]
	SUB	EAX,256
	CMP	EAX,255
	JBE	L99
	MOV	EAX,DWORD [-1416+EBP]
	SUB	EAX,512
	CMP	EAX,255
	JBE	L100
	MOV	EAX,DWORD [-1416+EBP]
	SUB	EAX,768
	CMP	EAX,255
	JBE	L101
	CMP	DWORD [-1416+EBP],10
	JE	L102
	CMP	DWORD [-1416+EBP],3
	JNE	L86
	PUSH	10
	PUSH	LC15
	PUSH	18
	PUSH	19
	PUSH	80
L93:
	PUSH	0
	PUSH	DWORD [-1428+EBP]
	CALL	_labelDraw
	ADD	ESP,28
	JMP	L86
L102:
	PUSH	10
	PUSH	LC14
	PUSH	18
	PUSH	19
	PUSH	64
	JMP	L93
L101:
	IMUL	EAX,DWORD [-1416+EBP],40
	MOV	EDI,DWORD [-1420+EBP]
	LEA	EAX,DWORD [-29676+EAX+EDI*1]
	PUSH	EAX
	CALL	_closeConsole
L94:
	POP	EAX
	JMP	L86
L100:
	MOVZX	EAX,BYTE [-1416+EBP]
	PUSH	EAX
	LEA	EAX,DWORD [-1052+EBP]
	PUSH	EAX
	CALL	_decodeMouse
	POP	ECX
	POP	EBX
	TEST	EAX,EAX
	JE	L86
	MOV	EDI,DWORD [-1040+EBP]
	MOV	EAX,DWORD [-1044+EBP]
	ADD	DWORD [-1412+EBP],EDI
	ADD	DWORD [-1408+EBP],EAX
	JS	L103
L56:
	CMP	DWORD [-1412+EBP],0
	JS	L104
L57:
	MOVSX	EAX,WORD [4084]
	DEC	EAX
	CMP	DWORD [-1408+EBP],EAX
	JLE	L58
	MOV	DWORD [-1408+EBP],EAX
L58:
	MOVSX	EAX,WORD [4086]
	DEC	EAX
	CMP	DWORD [-1412+EBP],EAX
	JLE	L59
	MOV	DWORD [-1412+EBP],EAX
L59:
	PUSH	DWORD [-1412+EBP]
	PUSH	DWORD [-1408+EBP]
	LEA	EDX,DWORD [-124+EBP]
	PUSH	LC11
	PUSH	EDX
	MOV	EBX,9
	LEA	ESI,DWORD [-1404+EBP]
	CALL	_sprintf
	PUSH	0
	MOV	ECX,EBX
	PUSH	0
	CLD
	SUB	ESP,36
	MOV	EDI,ESP
	REP
	MOVSD
	MOVSX	EAX,WORD [4084]
	PUSH	EAX
	LEA	ESI,DWORD [-1356+EBP]
	PUSH	DWORD [-1424+EBP]
	CALL	_windowDraw8
	ADD	ESP,68
	MOVSX	EAX,BYTE [-1380+EBP]
	PUSH	LC12
	PUSH	EAX
	MOV	EAX,DWORD [-1396+EBP]
	ADD	EAX,25
	PUSH	EAX
	MOV	EAX,DWORD [-1400+EBP]
	ADD	EAX,6
	PUSH	EAX
	MOVSX	EAX,WORD [4084]
	PUSH	EAX
	PUSH	DWORD [-1424+EBP]
	CALL	_wordsDraw8
	LEA	EAX,DWORD [-124+EBP]
	PUSH	EAX
	MOVSX	EAX,BYTE [-1380+EBP]
	PUSH	EAX
	MOV	EAX,DWORD [-1396+EBP]
	ADD	EAX,45
	PUSH	EAX
	MOV	EAX,DWORD [-1400+EBP]
	ADD	EAX,6
	PUSH	EAX
	MOVSX	EAX,WORD [4084]
	PUSH	EAX
	PUSH	DWORD [-1424+EBP]
	CALL	_wordsDraw8
	MOV	EDX,DWORD [-1400+EBP]
	MOV	ECX,DWORD [-1396+EBP]
	ADD	ESP,48
	MOV	EAX,ECX
	ADD	EAX,DWORD [-1388+EBP]
	INC	EAX
	PUSH	EAX
	MOV	EAX,EDX
	ADD	EAX,DWORD [-1392+EBP]
	INC	EAX
	PUSH	EAX
	PUSH	ECX
	PUSH	EDX
	PUSH	DWORD [-1428+EBP]
	CALL	_sheet_refresh
	PUSH	DWORD [-1412+EBP]
	PUSH	DWORD [-1408+EBP]
	PUSH	DWORD [-1432+EBP]
	CALL	_sheet_slide
	MOV	ECX,EBX
	ADD	ESP,32
	CLD
	PUSH	0
	PUSH	0
	SUB	ESP,36
	MOV	EDI,ESP
	REP
	MOVSD
	MOVSX	EAX,WORD [4084]
	PUSH	EAX
	LEA	EDI,DWORD [-124+EBP]
	PUSH	DWORD [-1424+EBP]
	CALL	_windowDraw8
	MOV	EAX,DWORD [3932176]
	SHR	EAX,20
	ADD	ESP,52
	PUSH	EAX
	LEA	EAX,DWORD [-124+EBP]
	PUSH	LC6
	PUSH	EAX
	CALL	_sprintf
	LEA	EDX,DWORD [-124+EBP]
	PUSH	EDX
	MOVSX	EAX,BYTE [-1332+EBP]
	PUSH	EAX
	MOV	EAX,DWORD [-1348+EBP]
	ADD	EAX,22
	PUSH	EAX
	MOV	EAX,DWORD [-1352+EBP]
	ADD	EAX,2
	PUSH	EAX
	MOVSX	EAX,WORD [4084]
	PUSH	EAX
	PUSH	DWORD [-1424+EBP]
	CALL	_wordsDraw8
	LEA	ECX,DWORD [-124+EBP]
	ADD	ESP,36
	MOV	EAX,DWORD [3932180]
	SHR	EAX,10
	PUSH	EAX
	PUSH	LC7
	PUSH	ECX
	CALL	_sprintf
	PUSH	EDI
	MOVSX	EAX,BYTE [-1332+EBP]
	PUSH	EAX
	MOV	EAX,DWORD [-1348+EBP]
	ADD	EAX,38
	PUSH	EAX
	MOV	EAX,DWORD [-1352+EBP]
	ADD	EAX,2
	PUSH	EAX
	MOVSX	EAX,WORD [4084]
	PUSH	EAX
	PUSH	DWORD [-1424+EBP]
	CALL	_wordsDraw8
	MOV	EDX,DWORD [-1352+EBP]
	MOV	ECX,DWORD [-1348+EBP]
	ADD	ESP,36
	MOV	EAX,ECX
	ADD	EAX,DWORD [-1340+EBP]
	INC	EAX
	PUSH	EAX
	MOV	EAX,EDX
	ADD	EAX,DWORD [-1344+EBP]
	INC	EAX
	PUSH	EAX
	PUSH	ECX
	PUSH	EDX
	PUSH	DWORD [-1428+EBP]
	CALL	_sheet_refresh
	ADD	ESP,20
	TEST	DWORD [-1036+EBP],1
	JE	L60
	CMP	DWORD [-1468+EBP],0
	JS	L105
	MOV	EBX,DWORD [-1412+EBP]
	MOV	ECX,DWORD [-1476+EBP]
	SUB	EBX,DWORD [-1472+EBP]
	MOV	ESI,DWORD [-1408+EBP]
	SUB	ESI,DWORD [-1468+EBP]
	ADD	EBX,DWORD [16+ECX]
	PUSH	EBX
	ADD	ESI,DWORD [12+ECX]
	PUSH	ESI
	PUSH	ECX
	CALL	_sheet_slide
	ADD	ESP,12
	MOV	EDI,DWORD [-1408+EBP]
	MOV	EAX,DWORD [-1412+EBP]
	MOV	DWORD [-1468+EBP],EDI
	MOV	DWORD [-1472+EBP],EAX
L75:
	TEST	DWORD [-1036+EBP],2
	JE	L76
	CMP	DWORD [-1484+EBP],1
	JE	L106
L76:
	MOV	DWORD [-1484+EBP],1
	JMP	L86
L106:
	PUSH	DWORD [-1420+EBP]
	CALL	_openConsole
	PUSH	DWORD [_CY]
	PUSH	DWORD [_CX]
	PUSH	EAX
	MOV	DWORD [-1480+EBP],EAX
	CALL	_sheet_slide
	MOV	ECX,DWORD [-1420+EBP]
	PUSH	DWORD [16+ECX]
	PUSH	DWORD [-1480+EBP]
	CALL	_sheet_updown
	ADD	ESP,24
	MOV	EDX,DWORD [_CX]
	MOV	ECX,DWORD [_CY]
	LEA	EAX,DWORD [8+EDX]
	ADD	EDX,408
	MOV	DWORD [_CX],EAX
	LEA	EAX,DWORD [28+ECX]
	MOV	DWORD [_CY],EAX
	MOVSX	EAX,WORD [4084]
	CMP	EDX,EAX
	JL	L77
	MOV	DWORD [_CX],8
L77:
	LEA	EDX,DWORD [278+ECX]
	MOVSX	EAX,WORD [4086]
	CMP	EDX,EAX
	JL	L78
	MOV	DWORD [_CY],8
L78:
	PUSH	DWORD [-1480+EBP]
	CALL	_keywinOn
	MOV	DWORD [-1484+EBP],0
	JMP	L94
L105:
	MOV	EAX,DWORD [-1420+EBP]
	MOV	EDI,DWORD [16+EAX]
	LEA	ECX,DWORD [-1+EDI]
	TEST	ECX,ECX
	JLE	L75
L73:
	MOV	EDX,DWORD [-1420+EBP]
	MOV	EBX,DWORD [-1412+EBP]
	MOV	ESI,DWORD [-1408+EBP]
	MOV	EDX,DWORD [20+EDX+ECX*4]
	MOV	DWORD [-1476+EBP],EDX
	SUB	EBX,DWORD [16+EDX]
	SUB	ESI,DWORD [12+EDX]
	JS	L64
	MOV	EAX,DWORD [4+EDX]
	CMP	ESI,EAX
	JGE	L64
	TEST	EBX,EBX
	JS	L64
	CMP	EBX,DWORD [8+EDX]
	JGE	L64
	IMUL	EAX,EBX
	MOV	DWORD [-1496+EBP],EAX
	MOV	EDX,DWORD [EDX]
	MOV	EAX,DWORD [-1496+EBP]
	ADD	EAX,ESI
	MOVZX	EAX,BYTE [EAX+EDX*1]
	MOV	EDX,DWORD [-1476+EBP]
	CMP	EAX,DWORD [20+EDX]
	JNE	L107
L64:
	DEC	ECX
	TEST	ECX,ECX
	JG	L73
	JMP	L75
L107:
	LEA	EAX,DWORD [-1+EDI]
	PUSH	EAX
	PUSH	EDX
	CALL	_sheet_updown
	MOV	ECX,DWORD [-1480+EBP]
	POP	EAX
	CMP	DWORD [-1476+EBP],ECX
	POP	EDX
	JE	L68
	PUSH	ECX
	CALL	_keywinOff
	MOV	EDI,DWORD [-1476+EBP]
	PUSH	EDI
	MOV	DWORD [-1480+EBP],EDI
	CALL	_keywinOn
	POP	EDI
	POP	EAX
L68:
	CMP	ESI,2
	JLE	L69
	MOV	EDX,DWORD [-1476+EBP]
	MOV	EAX,DWORD [4+EDX]
	SUB	EAX,3
	CMP	ESI,EAX
	JGE	L69
	CMP	EBX,2
	JLE	L69
	CMP	EBX,20
	JG	L69
	MOV	ECX,DWORD [-1408+EBP]
	MOV	EDI,DWORD [-1412+EBP]
	MOV	DWORD [-1468+EBP],ECX
	MOV	DWORD [-1472+EBP],EDI
L69:
	MOV	EAX,DWORD [-1476+EBP]
	MOV	EDX,DWORD [4+EAX]
	LEA	EAX,DWORD [-21+EDX]
	CMP	EAX,ESI
	JG	L75
	LEA	EAX,DWORD [-5+EDX]
	CMP	ESI,EAX
	JGE	L75
	CMP	EBX,4
	JLE	L75
	CMP	EBX,18
	JG	L75
	MOV	EDX,DWORD [-1476+EBP]
	TEST	BYTE [28+EDX],16
	JNE	L92
	MOV	EBX,DWORD [36+EDX]
	CALL	_io_cli
	PUSH	4
	LEA	EAX,DWORD [120+EBX]
	PUSH	EAX
	CALL	_putFIFOBuffer32
L96:
	CALL	_io_sti
	POP	EDX
	POP	ECX
	JMP	L75
L92:
	MOV	EDX,DWORD [-1476+EBP]
	MOV	EBX,DWORD [36+EDX]
	CALL	_io_cli
	LEA	EAX,DWORD [12+EBX]
	MOV	DWORD [48+EBX],EAX
	MOV	DWORD [40+EBX],_asm_end_app
	PUSH	LC13
	PUSH	DWORD [148+EBX]
	CALL	_sysprintl
	JMP	L96
L60:
	MOV	DWORD [-1468+EBP],-1
	JMP	L75
L104:
	MOV	DWORD [-1412+EBP],0
	JMP	L57
L103:
	MOV	DWORD [-1408+EBP],0
	JMP	L56
L99:
	PUSH	EAX
	LEA	EBX,DWORD [-124+EBP]
	PUSH	LC8
	LEA	ESI,DWORD [-1404+EBP]
	PUSH	EBX
	CALL	_sprintf
	MOV	ECX,9
	PUSH	0
	PUSH	0
	SUB	ESP,36
	CLD
	MOV	EDI,ESP
	REP
	MOVSD
	MOVSX	EAX,WORD [4084]
	PUSH	EAX
	PUSH	DWORD [-1424+EBP]
	CALL	_windowDraw8
	ADD	ESP,64
	MOVSX	EAX,BYTE [-1380+EBP]
	PUSH	LC9
	PUSH	EAX
	MOV	EAX,DWORD [-1396+EBP]
	ADD	EAX,25
	PUSH	EAX
	MOV	EAX,DWORD [-1400+EBP]
	ADD	EAX,6
	PUSH	EAX
	MOVSX	EAX,WORD [4084]
	PUSH	EAX
	PUSH	DWORD [-1424+EBP]
	CALL	_wordsDraw8
	PUSH	EBX
	MOVSX	EAX,BYTE [-1380+EBP]
	PUSH	EAX
	MOV	EAX,DWORD [-1396+EBP]
	ADD	EAX,45
	PUSH	EAX
	MOV	EAX,DWORD [-1400+EBP]
	ADD	EAX,6
	PUSH	EAX
	MOVSX	EAX,WORD [4084]
	PUSH	EAX
	PUSH	DWORD [-1424+EBP]
	CALL	_wordsDraw8
	MOV	EDX,DWORD [-1400+EBP]
	MOV	ECX,DWORD [-1396+EBP]
	ADD	ESP,48
	MOV	EAX,ECX
	ADD	EAX,DWORD [-1388+EBP]
	INC	EAX
	PUSH	EAX
	MOV	EAX,EDX
	ADD	EAX,DWORD [-1392+EBP]
	INC	EAX
	PUSH	EAX
	PUSH	ECX
	PUSH	EDX
	PUSH	DWORD [-1428+EBP]
	CALL	_sheet_refresh
	ADD	ESP,20
	CMP	DWORD [-1416+EBP],383
	JG	L24
	MOV	ECX,DWORD [-1416+EBP]
	MOV	AL,BYTE [_KEY_TABLE-256+ECX]
	TEST	AL,AL
	JE	L24
	CMP	DWORD [-1456+EBP],0
	JE	L95
	MOV	EDI,DWORD [-1416+EBP]
	MOV	AL,BYTE [_KEY_TABLE_CTRL-256+EDI]
L95:
	MOV	BYTE [-124+EBP],AL
L27:
	MOV	DL,BYTE [-124+EBP]
	LEA	EAX,DWORD [-65+EDX]
	CMP	AL,25
	JA	L28
	TEST	DWORD [-1460+EBP],4
	JNE	L91
	CMP	DWORD [-1456+EBP],0
	JE	L30
L28:
	MOV	AL,BYTE [-124+EBP]
	TEST	AL,AL
	JE	L32
	CMP	DWORD [-1480+EBP],0
	JE	L32
	MOVSX	EAX,AL
	ADD	EAX,256
	MOV	EDX,DWORD [-1480+EBP]
	PUSH	EAX
	MOV	EAX,DWORD [36+EDX]
	ADD	EAX,120
	PUSH	EAX
	CALL	_putFIFOBuffer32
	POP	ESI
	POP	EDI
L32:
	CMP	DWORD [-1416+EBP],270
	JE	L108
L33:
	CMP	DWORD [-1416+EBP],284
	JE	L109
L34:
	CMP	DWORD [-1416+EBP],271
	JE	L110
L35:
	CMP	DWORD [-1416+EBP],298
	JE	L111
L37:
	CMP	DWORD [-1416+EBP],310
	JE	L112
L38:
	CMP	DWORD [-1416+EBP],426
	JE	L113
L39:
	CMP	DWORD [-1416+EBP],438
	JE	L114
L40:
	CMP	DWORD [-1416+EBP],314
	JE	L115
L41:
	CMP	DWORD [-1416+EBP],325
	JE	L116
L42:
	CMP	DWORD [-1416+EBP],326
	JE	L117
L43:
	CMP	DWORD [-1416+EBP],316
	JE	L118
L44:
	CMP	DWORD [-1416+EBP],318
	JE	L119
L48:
	CMP	DWORD [-1416+EBP],343
	JE	L120
L50:
	CMP	DWORD [-1416+EBP],506
	JE	L121
L51:
	CMP	DWORD [-1416+EBP],510
	JNE	L86
	CALL	_waitKBCReady
	PUSH	DWORD [-1464+EBP]
	PUSH	96
	CALL	_io_out8
	POP	ESI
	POP	EDI
	JMP	L86
L121:
	MOV	DWORD [-1464+EBP],-1
	JMP	L51
L120:
	MOV	ECX,DWORD [-1420+EBP]
	MOV	EAX,DWORD [16+ECX]
	CMP	EAX,2
	JLE	L50
	DEC	EAX
	PUSH	EAX
	PUSH	DWORD [24+ECX]
	CALL	_sheet_updown
	POP	EAX
	POP	EDX
	JMP	L50
L119:
	CMP	DWORD [-1456+EBP],0
	JE	L48
	CMP	DWORD [-1480+EBP],0
	JE	L48
	MOV	EDX,DWORD [-1480+EBP]
	MOV	EBX,DWORD [36+EDX]
	TEST	EBX,EBX
	JE	L48
	CMP	DWORD [16+EBX],0
	JE	L48
	CALL	_io_cli
	LEA	EAX,DWORD [12+EBX]
	MOV	DWORD [48+EBX],EAX
	MOV	DWORD [40+EBX],_asm_end_app
	PUSH	LC10
	PUSH	DWORD [148+EBX]
	CALL	_sysprintl
	CALL	_io_sti
	POP	ECX
	POP	EBX
	JMP	L48
L118:
	CMP	DWORD [-1456+EBP],0
	JE	L44
	CMP	DWORD [-1480+EBP],0
	JE	L45
	PUSH	DWORD [-1480+EBP]
	CALL	_keywinOff
	POP	EDI
L45:
	PUSH	DWORD [-1420+EBP]
	CALL	_openConsole
	PUSH	DWORD [_CY]
	PUSH	DWORD [_CX]
	PUSH	EAX
	MOV	DWORD [-1480+EBP],EAX
	CALL	_sheet_slide
	MOV	EAX,DWORD [-1420+EBP]
	PUSH	DWORD [16+EAX]
	PUSH	DWORD [-1480+EBP]
	CALL	_sheet_updown
	ADD	ESP,24
	MOV	EDX,DWORD [_CX]
	MOV	ECX,DWORD [_CY]
	LEA	EAX,DWORD [8+EDX]
	ADD	EDX,408
	MOV	DWORD [_CX],EAX
	LEA	EAX,DWORD [28+ECX]
	MOV	DWORD [_CY],EAX
	MOVSX	EAX,WORD [4084]
	CMP	EDX,EAX
	JL	L46
	MOV	DWORD [_CX],8
L46:
	LEA	EDX,DWORD [278+ECX]
	MOVSX	EAX,WORD [4086]
	CMP	EDX,EAX
	JL	L47
	MOV	DWORD [_CY],8
L47:
	PUSH	DWORD [-1480+EBP]
	CALL	_keywinOn
	POP	ESI
	JMP	L44
L117:
	PUSH	237
	LEA	EBX,DWORD [-76+EBP]
	PUSH	EBX
	XOR	DWORD [-1460+EBP],1
	CALL	_putFIFOBuffer32
	PUSH	DWORD [-1460+EBP]
	PUSH	EBX
	CALL	_putFIFOBuffer32
	ADD	ESP,16
	JMP	L43
L116:
	PUSH	237
	LEA	EBX,DWORD [-76+EBP]
	PUSH	EBX
	XOR	DWORD [-1460+EBP],1
	CALL	_putFIFOBuffer32
	PUSH	DWORD [-1460+EBP]
	PUSH	EBX
	CALL	_putFIFOBuffer32
	ADD	ESP,16
	JMP	L42
L115:
	PUSH	237
	LEA	EBX,DWORD [-76+EBP]
	PUSH	EBX
	XOR	DWORD [-1460+EBP],4
	CALL	_putFIFOBuffer32
	PUSH	DWORD [-1460+EBP]
	PUSH	EBX
	CALL	_putFIFOBuffer32
	ADD	ESP,16
	JMP	L41
L114:
	AND	DWORD [-1456+EBP],-3
	JMP	L40
L113:
	AND	DWORD [-1456+EBP],-2
	JMP	L39
L112:
	OR	DWORD [-1456+EBP],2
	JMP	L38
L111:
	OR	DWORD [-1456+EBP],1
	JMP	L37
L110:
	PUSH	DWORD [-1480+EBP]
	CALL	_keywinOff
	POP	EAX
	MOV	EAX,DWORD [-1480+EBP]
	MOV	ECX,DWORD [24+EAX]
	DEC	ECX
	JNE	L36
	MOV	EDX,DWORD [-1420+EBP]
	MOV	ECX,DWORD [16+EDX]
	DEC	ECX
L36:
	MOV	EDI,DWORD [-1420+EBP]
	MOV	ECX,DWORD [20+EDI+ECX*4]
	PUSH	ECX
	MOV	DWORD [-1480+EBP],ECX
	CALL	_keywinOn
	POP	EAX
	JMP	L35
L109:
	CMP	DWORD [-1480+EBP],0
	JE	L34
	MOV	EDI,DWORD [-1480+EBP]
	PUSH	266
	MOV	EAX,DWORD [36+EDI]
	ADD	EAX,120
	PUSH	EAX
	CALL	_putFIFOBuffer32
	POP	EAX
	POP	EDX
	JMP	L34
L108:
	CMP	DWORD [-1480+EBP],0
	JE	L33
	MOV	ECX,DWORD [-1480+EBP]
	PUSH	264
	MOV	EAX,DWORD [36+ECX]
	ADD	EAX,120
	PUSH	EAX
	CALL	_putFIFOBuffer32
	POP	ECX
	POP	EBX
	JMP	L33
L30:
	LEA	EAX,DWORD [32+EDX]
	MOV	BYTE [-124+EBP],AL
	JMP	L28
L91:
	CMP	DWORD [-1456+EBP],0
	JE	L28
	JMP	L30
L24:
	MOV	BYTE [-124+EBP],0
	JMP	L27
L98:
	PUSH	DWORD [-1436+EBP]
	CALL	_taskSleep
	CALL	_io_sti
	JMP	L94
L97:
	PUSH	EBX
	CALL	_getFIFOBuffer32
	MOV	DWORD [-1464+EBP],EAX
	CALL	_waitKBCReady
	PUSH	DWORD [-1464+EBP]
	PUSH	96
	CALL	_io_out8
	ADD	ESP,12
	JMP	L17
L2:
	MOV	DWORD [-1416+EBP],0
L8:
	MOV	ECX,DWORD [-1416+EBP]
	MOV	AL,BYTE [_fonbase+ECX]
	MOV	BYTE [ECX+EBX*1],AL
	INC	ECX
	MOV	DWORD [-1416+EBP],ECX
	CMP	ECX,4095
	JLE	L8
	MOV	DWORD [-1416+EBP],4096
L13:
	MOV	EDI,DWORD [-1416+EBP]
	MOV	BYTE [EDI+EBX*1],-1
	INC	EDI
	MOV	DWORD [-1416+EBP],EDI
	CMP	EDI,145471
	JLE	L13
	JMP	L3
	GLOBAL	_keywinOff
_keywinOff:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EBX
	PUSH	1
	MOV	EBX,DWORD [8+EBP]
	PUSH	EBX
	CALL	_refreshWindowCaptionx
	TEST	BYTE [28+EBX],32
	POP	EAX
	POP	EDX
	JNE	L124
L122:
	MOV	EBX,DWORD [-4+EBP]
	LEAVE
	RET
L124:
	PUSH	3
	MOV	EAX,DWORD [36+EBX]
	ADD	EAX,120
	PUSH	EAX
	CALL	_putFIFOBuffer32
	POP	EBX
	POP	EAX
	JMP	L122
	GLOBAL	_keywinOn
_keywinOn:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EBX
	PUSH	0
	MOV	EBX,DWORD [8+EBP]
	PUSH	EBX
	CALL	_refreshWindowCaptionx
	TEST	BYTE [28+EBX],32
	POP	EAX
	POP	EDX
	JNE	L127
L125:
	MOV	EBX,DWORD [-4+EBP]
	LEAVE
	RET
L127:
	PUSH	2
	MOV	EAX,DWORD [36+EBX]
	ADD	EAX,120
	PUSH	EAX
	CALL	_putFIFOBuffer32
	POP	ECX
	POP	EBX
	JMP	L125
	GLOBAL	_refreshWindowCaptionx
_refreshWindowCaptionx:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	SUB	ESP,20
	MOV	EAX,DWORD [8+EBP]
	CMP	DWORD [12+EBP],0
	MOV	ECX,DWORD [4+EAX]
	JNE	L129
	MOV	BYTE [-18+EBP],17
	MOV	BYTE [-17+EBP],20
	MOV	BYTE [-20+EBP],24
	MOV	BYTE [-19+EBP],20
L130:
	MOV	EDI,ECX
	MOV	DWORD [-32+EBP],ECX
	MOV	DWORD [-16+EBP],20
L143:
	MOV	EBX,1
	LEA	EAX,DWORD [-4+ECX]
	CMP	EBX,EAX
	JG	L147
L142:
	MOV	ESI,DWORD [8+EBP]
	MOV	EDX,DWORD [-32+EBP]
	ADD	EDX,EBX
	MOV	ESI,DWORD [ESI]
	MOV	DWORD [-24+EBP],ESI
	MOV	DL,BYTE [EDX+ESI*1]
	CMP	DL,BYTE [-17+EBP]
	JE	L148
L139:
	CMP	DL,BYTE [-19+EBP]
	JE	L149
L140:
	LEA	EAX,DWORD [EBX+EDI*1]
	MOV	ESI,DWORD [-24+EBP]
	INC	EBX
	MOV	BYTE [EAX+ESI*1],DL
	LEA	EAX,DWORD [-4+ECX]
	CMP	EBX,EAX
	JLE	L142
L147:
	ADD	EDI,ECX
	ADD	DWORD [-32+EBP],ECX
	DEC	DWORD [-16+EBP]
	JNS	L143
	PUSH	22
	PUSH	ECX
	PUSH	1
	PUSH	1
	PUSH	DWORD [8+EBP]
	CALL	_sheet_refresh
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L149:
	MOV	DL,BYTE [-20+EBP]
	JMP	L140
L148:
	LEA	EAX,DWORD [-22+ECX]
	CMP	EBX,EAX
	JG	L139
	MOV	DL,BYTE [-18+EBP]
	JMP	L140
L129:
	MOV	BYTE [-18+EBP],20
	MOV	BYTE [-17+EBP],17
	MOV	BYTE [-20+EBP],20
	MOV	BYTE [-19+EBP],24
	JMP	L130
[SECTION .data]
LC17:
	DB	"Console",0x00
LC16:
	DB	"Create new console fail!",0x00
[SECTION .text]
	GLOBAL	_openConsole
_openConsole:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	PUSH	EBX
	PUSH	DWORD [8+EBP]
	CALL	_sheet_alloc
	POP	ECX
	MOV	ESI,EAX
	TEST	EAX,EAX
	JE	L152
	PUSH	100000
	PUSH	3932160
	CALL	_memeryAlloc4k
	MOV	EBX,EAX
	CALL	_taskAlloc
	PUSH	512
	MOV	EDI,EAX
	PUSH	3932160
	CALL	_memeryAlloc4k
	PUSH	-1
	PUSH	250
	PUSH	400
	MOV	DWORD [-16+EBP],EAX
	PUSH	EBX
	PUSH	ESI
	CALL	_sheet_setbuf
	ADD	ESP,36
	PUSH	0
	PUSH	1
	PUSH	LC17
	PUSH	250
	PUSH	400
	PUSH	EBX
	CALL	_createWindow
	PUSH	65536
	PUSH	3932160
	CALL	_memeryAlloc4k
	ADD	ESP,32
	MOV	DWORD [156+EDI],EAX
	ADD	EAX,65524
	MOV	DWORD [64+EDI],EAX
	PUSH	65536
	PUSH	3932160
	CALL	_memeryAlloc4k
	ADD	EAX,65524
	MOV	DWORD [64+EDI],EAX
	MOV	DWORD [40+EDI],_consoleTask
	MOV	DWORD [80+EDI],8
	MOV	DWORD [84+EDI],16
	MOV	DWORD [88+EDI],8
	MOV	DWORD [92+EDI],8
	MOV	DWORD [96+EDI],8
	MOV	DWORD [100+EDI],8
	MOV	DWORD [4+EAX],ESI
	MOV	EDX,DWORD [64+EDI]
	MOV	EAX,DWORD [3932176]
	MOV	DWORD [8+EDX],EAX
	PUSH	2
	PUSH	2
	PUSH	EDI
	CALL	_taskRun
	LEA	EAX,DWORD [120+EDI]
	MOV	DWORD [36+ESI],EDI
	OR	DWORD [28+ESI],32
	PUSH	EDI
	PUSH	128
	PUSH	DWORD [-16+EBP]
	PUSH	EAX
	CALL	_initFIFOBuffer32
	MOV	EAX,ESI
L150:
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L152:
	PUSH	LC16
	CALL	_taskNow
	PUSH	DWORD [148+EAX]
	CALL	_sysprintl
	XOR	EAX,EAX
	JMP	L150
	GLOBAL	_closeConstask
_closeConstask:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EBX
	MOV	EBX,DWORD [8+EBP]
	PUSH	EBX
	CALL	_taskSleep
	PUSH	65536
	PUSH	DWORD [156+EBX]
	PUSH	3932160
	CALL	_memeryFree4k
	PUSH	512
	PUSH	DWORD [120+EBX]
	PUSH	3932160
	CALL	_memeryFree4k
	MOV	DWORD [4+EBX],0
	MOV	EBX,DWORD [-4+EBP]
	LEAVE
	RET
	GLOBAL	_closeConsole
_closeConsole:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ESI
	PUSH	EBX
	MOV	EBX,DWORD [8+EBP]
	MOV	ESI,DWORD [36+EBX]
	PUSH	42240
	PUSH	DWORD [EBX]
	PUSH	3932160
	CALL	_memeryFree4k
	PUSH	EBX
	CALL	_sheet_free
	MOV	DWORD [8+EBP],ESI
	ADD	ESP,16
	LEA	ESP,DWORD [-8+EBP]
	POP	EBX
	POP	ESI
	POP	EBP
	JMP	_closeConstask
