/*
 * Title: Our first OS: HellOS
 */             
	.code16
        .section .text
        .global main
main:

        jmp _start
        .byte   144             #NOP 
        .ascii  "HellOS"        #OEMLabel               
        .word   512             #BytesPerSector           
        .byte   1               #SectorsPerCluster        
        .word   1               #ReservedForBoot           
        .byte   2               #NumberOfFats             
        .word   224             #RootDirEntries (224 * 32 = 7168 = 14 sectors to read)          
        .word   2880            #LogicalSectors             
        .byte   0xf0            #MediumByte               
        .word   9               #SectorsPerFat            
        .word   18              #SectorsPerTrack          
        .word   2               #Sides                    
        .long   0               #HiddenSectors              
        .byte   0               #LargeSectors           
        .byte   0               #DriveNo                                   
        .byte   0x29            #Signature (41 for Floppy)
        .long   0x12345678      #VolumeID
        .ascii  "Our First OS"  #VolumeLabel
        .ascii  "FAT12   "      #FileSystem

_start:
	ljmp $0, $real_start		# cs = 0

real_start:
	cli
	xorw %ax, %ax			# setup stack and segments
	movw %ax, %ds
	movw %ax, %es
	movw %ax, %ss
	movw $0x7c00, %sp
	sti

	movw	%cs,	%ax
	movw	%ax,	%ds
	movw	%ax,	%es

	call	clear_screen
	movb    $0x00,  %bh
	movb	$0x00,	%dh
	movb	$0x00,	%dl
	call	set_cursor
	movw    $0x07d0,  %cx  #size of char 80*25  0x50*0x19 
	movb    $0x00,  %bh      
	movb    $0x20,  %al  
	movb    $0x5f,  %bl
        movb    $0x09,  %ah
        int     $0x10
	movb    $0x0a,  %dh    
	movb    $0x15,  %dl
	movw    $0x01,  %cx 
	movw	$string, %si

begin_print:            
	addb	$0x01,	%dl
	cmpb	$0x39,	%dl
	je	new_line
	call	set_cursor
	movb    (%si),  %bl
	addw    $1, %si
	call	print_char
	jmp	  begin_print

_next:
	movb	$0x0e,	%dh
	movb	$0x3b,	%dl
	call	set_cursor          #设置光标

	movb	$0x86,	%ah
	movw	$0x001e,	%cx
	movw	$0x8480,	%dx
	int	$0x15                #延时
	
load:                           #将磁盘数据读到指定内存
	movw	$0x00,	%dx	#dh->head,dl->driver
	movw	$0x0800,	%ax
	movw	%ax,	%es
	xorw	%bx,	%bx	#es:bx->the data   0x0800:0000
	movb	$0,	%ch	#ch->磁道号
	movb	$2,	%cl	#cl->sector 
	movb	$2,	%ah	#param
	movb	$1,	%al	#how many blocks to read
	int	$0x13
	jnc 	_end

_error:
	jmp	load

_end:
	call	clear_screen
	movw	$0x0800, %ax
	movw	%ax, %es
	movw	$0x0000, %bx
	ljmp	$0x0800, $0x0000

new_line:
	addb	$0x01,  %dh
	cmpb	$0x0f,	%dh
	je	_next
	movb    $0x15,  %dl
	jmp	begin_print	

print_char:
	movb    $0x09,  %ah
        int     $0x10
	ret

set_cursor:
	movb    $0x02,  %ah
        int     $0x10
	ret

clear_screen:               
    movb    $0x06,  %ah     #  
    movb    $0,     %al     # 
    movb    $0,     %ch     # 
    movb    $0,     %cl     #    
    movb    $24,    %dh     # 
    movb    $79,    %dl     # 
    movb    $0x07,  %bh     #  
    int     $0x10  
    ret 

string:
       .byte 0xff,0xff,0x5f,0xff,0xff,0x5f, 0xff,0xff,0xff,0xff,0xff,0x5f, 0xff,0xff,0x5f,0x5f,0x5f,0x5f
	.byte 0xff,0xff,0x5f,0x5f,0x5f,0x5f, 0xff,0xff,0xff,0xff,0xff,0x5f, 0xff,0xff,0xff,0xff,0xff
        
	.byte 0xff,0xff,0x5f,0xff,0xff,0x5f, 0xff,0xff,0x5f,0x5f,0x5f,0x5f, 0xff,0xff,0x5f,0x5f,0x5f,0x5f
	.byte 0xff,0xff,0x5f,0x5f,0x5f,0x5f, 0xff,0x5f,0x5f,0x5f,0xff,0x5f, 0xff,0xff,0x5f,0x5f,0x5f
        
	.byte 0xff,0xff,0xff,0xff,0xff,0x5f, 0xff,0xff,0xff,0xff,0xff,0x5f, 0xff,0xff,0x5f,0x5f,0x5f,0x5f
	.byte 0xff,0xff,0x5f,0x5f,0x5f,0x5f, 0xff,0x5f,0x5f,0x5f,0xff,0x5f, 0xff,0xff,0xff,0xff,0xff

	.byte 0xff,0xff,0x5f,0xff,0xff,0x5f, 0xff,0xff,0x5f,0x5f,0x5f,0x5f, 0xff,0xff,0x5f,0x5f,0x5f,0x5f
	.byte 0xff,0xff,0x5f,0x5f,0x5f,0x5f, 0xff,0x5f,0x5f,0x5f,0xff,0x5f, 0x5f,0x5f,0x5f,0xff,0xff	

	.byte 0xff,0xff,0x5f,0xff,0xff,0x5f, 0xff,0xff,0xff,0xff,0xff,0x5f, 0xff,0xff,0xff,0xff,0xff,0x5f
	.byte 0xff,0xff,0xff,0xff,0xff,0x5f, 0xff,0xff,0xff,0xff,0xff,0x5f, 0xff,0xff,0xff,0xff,0xff

        .fill 0x1fe - (. - main) ,1,0   #Pad remainder of boot sector with 0s
        .word   0xaa55                  #The standard PC boot signature

