/**
 * ===================NNOS-Memery============================
 *【内存管理系统】
 * -----------------------------------------------------------
 * ·日期：2019-3-15      作者：年年软件
 * ===========================================================
**/

/*头文件引用*/	
#include "./lib/nnos.h"	//系统函数声明

#define EFLAGS_AC_BIT		0x00040000
#define CR0_CACHE_DISABLE	0x60000000

/*内存检查*/
//486及以上CPU有Cache，需要先禁用Cache才能完成内存检查
unsigned int memeryCheck(unsigned int start,unsigned int end){ 
	char flag486 = 0; //内存检查前的准备工作
	unsigned int eflag,cr0,i;
	eflag = io_load_eflags(); //读取EFLAGS寄存器内容到elag变量
	eflag |= EFLAGS_AC_BITS;   //将eflag的值与AC位存在校验码EFLAGS_AC_BIT做或运算赋值给eflag变量，使得AC位变为1。AC位在第18位。
	io_store_eflags(eflag);   //将eflag的值保存到EFLAGS寄存器
	eflag = io_load_eflags(); //读取EFLAGS寄存器内容到elag变量（386会自动把AC位置回0）。
	if((eflag & EFLAGS_AC_BITS) != 0){ //若相同，AC位未变回0，则为486
		flag486 = 1;
	}
	eflag &= ~EFLAGS_AC_BITS; //恢复AC位数值为0
	io_store_eflags(eflag);  //保存
	
	if(flag486 != 0){
		cr0 = load_cr0();//读取cr0寄存器内容到cr0变量
		cr0 |= CR0_CACHE_DISABLE;
		store_cr0(cr0);
	}
	
	i = memtest_sub(start,end); //检查内存，memtest_sub()函数见osfun.asm
	
	if(flag486 != 0){
		cr0 = load_cr0();
		cr0 &= ~CR0_CACHE_DISABLE; //启用Cache
		store_cr0(cr0);
	}
	return i;
}

/*初始化内存表*/
void initMemeryManager(MEMERY_LIST *memeryList){ //初始化内存表
	memeryList->total_size = memeryCheck(0x00400000,0xbfffffff); //内存总量等于内存检查返回的内存大小
	//memeryFree(memeryList,0x00001000,0x0009e000); //初始空闲内存，开头预留4M给系统 //这两句放在此处会导致黑屏，原因未知
	//memeryFree(memeryList,0x00400000,memeryList->total_size - 0x00400000); //中间预留给显卡(?)
	memeryList->number = 0;	//从0开始计数
	memeryList->max_number = 0;
	memeryList->lost_number = 0;
	memeryList->lost_size = 0;
}

/*计算剩余空间*/
unsigned int memeryTotal(MEMERY_LIST *memeryList){ //获取空闲内存大小
	COUNT i;
	unsigned int totalSize = 0;
	for(i = 0;i < memeryList->number;i++){
		totalSize += memeryList->free[i].size;
	}
	memeryList->total_free_size = totalSize;
	return totalSize;
}

unsigned int memeryAlloc(MEMERY_LIST *man, unsigned int size)
/* 確保 */
{
	unsigned int i, a;
	for (i = 0; i < man->number; i++) {
		if (man->free[i].size >= size) {
			/* 十分な広さのあきを発見 */
			a = man->free[i].addr;
			man->free[i].addr += size;
			man->free[i].size -= size;
			if (man->free[i].size == 0) {
				/* free[i]がなくなったので前へつめる */
				man->number--;
				for (; i < man->number; i++) {
					man->free[i] = man->free[i + 1]; /* 構造体の代入 */
				}
			}
			return a;
		}
	}
	return 0; /* あきがない */
}

int memeryFree(MEMERY_LIST *man, unsigned int addr, unsigned int size)
/* 解放 */
{
	int i, j;
	/* まとめやすさを考えると、free[]がaddr順に並んでいるほうがいい */
	/* だからまず、どこに入れるべきかを決める */
	for (i = 0; i < man->number; i++) {
		if (man->free[i].addr > addr) {
			break;
		}
	}
	/* free[i - 1].addr < addr < free[i].addr */
	if (i > 0) {
		/* 前がある */
		if (man->free[i - 1].addr + man->free[i - 1].size == addr) {
			/* 前のあき領域にまとめられる */
			man->free[i - 1].size += size;
			if (i < man->number) {
				/* 後ろもある */
				if (addr + size == man->free[i].addr) {
					/* なんと後ろともまとめられる */
					man->free[i - 1].size += man->free[i].size;
					/* man->free[i]の削除 */
					/* free[i]がなくなったので前へつめる */
					man->number--;
					for (; i < man->number; i++) {
						man->free[i] = man->free[i + 1]; /* 構造体の代入 */
					}
				}
			}
			return 0; /* 成功終了 */
		}
	}
	/* 前とはまとめられなかった */
	if (i < man->number) {
		/* 後ろがある */
		if (addr + size == man->free[i].addr) {
			/* 後ろとはまとめられる */
			man->free[i].addr = addr;
			man->free[i].size += size;
			return 0; /* 成功終了 */
		}
	}
	/* 前にも後ろにもまとめられない */
	if (man->number < MEMMAN_FREES) {
		/* free[i]より後ろを、後ろへずらして、すきまを作る */
		for (j = man->number; j > i; j--) {
			man->free[j] = man->free[j - 1];
		}
		man->number++;
		if (man->max_number < man->number) {
			man->max_number = man->number; /* 最大値を更新 */
		}
		man->free[i].addr = addr;
		man->free[i].size = size;
		return 0; /* 成功終了 */
	}
	/* 後ろにずらせなかった */
	man->lost_number++;
	man->lost_size += size;
	return -1; /* 失敗終了 */
}

/* unsigned int memeryAlloc4k(MEMERY_LIST *man, unsigned int size)
{
	unsigned int a;
	size = (size + 0xfff) & 0xfffff000;
	a = memeryAlloc(man, size);
	return a;
} */

/*4K取整方式申请内存*/
unsigned int memeryAlloc4k(MEMERY_LIST *memeryList,unsigned int size){ //内存空间分配前向上取整，最小4K(0x)，减少碎片
	unsigned int addr; //分配到的首地址
	//size = (size + 0xfff) & BLOCK_ALIGN; //以4K为最小单位向上取整。相当于if((i & 0xfff) != 0){i = (i & 0xfffff000) + 0x1000;}
	size = (size + 0xfff) & 0xfffff000; //以4K为最小单位向上取整。相当于if((i & 0xfff) != 0){i = (i & 0xfffff000) + 0x1000;}
	addr = memeryAlloc(memeryList,size);
	return addr;
}

/* unsigned int memeryFree4k(MEMERY_LIST *man, unsigned int addr, unsigned int size)
{
	int i;
	size = (size + 0xfff) & 0xfffff000;
	i = memeryFree(man, addr, size);
	return i;
} */

/*4K取整方式释放内存*/
unsigned int memeryFree4k(MEMERY_LIST *memeryList,unsigned int addr,unsigned int size){ //内存空间释放按4K向上取整
	int i;
	size = (size + 0xfff) & 0xfffff000; //以4K为最小单位向上取整
	i = memeryFree(memeryList,addr,size);
	return i;
}

/*删除内存表项*/
void deleteBlock(MEMERY_LIST *memeryList,int i){ //删除空内存表项
	int j;
	memeryList->number--;
	for(j = i;j < memeryList->number;j++){
		memeryList->free[j] = memeryList->free[j + 1];
	}
}

/*增加内存表项*/
void addBlock(MEMERY_LIST *memeryList,int i){ //插入内存表项
	int j;
	for(j = memeryList->number;j > i;j--){
		memeryList->free[j] = memeryList->free[j - 1];
	}
	memeryList->number++;
}


/*内存块递增排序*/
void sortMemery(MEMERY_LIST *memeryList,int low,int high){ //按内存块大小递增简单排序
	COUNT i,j;
	FREE_BLOCK temp;
	for(i = 0;i < memeryList->number;i++){
		for(j = i;j < memeryList->number;j++){
			if(memeryList->free[i].size > memeryList->free[j].size){
				temp = memeryList->free[j];
				memeryList->free[j] = memeryList->free[i];
				memeryList->free[i] = temp;
			}
		}
	}
}

/*地址递增排序*/
void sortAddr(MEMERY_LIST *memeryList,unsigned int low,unsigned int high){ //按内存地址大小递增简单排序
	COUNT i,j;
	FREE_BLOCK temp;
	for(i = 0;i < memeryList->number;i++){
		for(j = i;j < memeryList->number;j++){
			if(memeryList->free[i].addr > memeryList->free[j].addr){
				temp = memeryList->free[j];
				memeryList->free[j] = memeryList->free[i];
				memeryList->free[i] = temp;
			}
		}
	}	
}

/*清理内存*/
/* void clearMemery(MEMERY_LIST *memeryList,unsigned int addr,unsigned int size){
	char *p = addr;
	int i = 0;
	//unsigned int *p = addr;
	for(i = 0;i < size / sizeof(char);i++){
		p[i] = 0;
	}
} */

//=====已废弃的函数=========================================================================================
/* void sortMemery(MEMERY_LIST *memeryList,int low,int high){ //空闲内存块按容量递增快速排序
	if(low > high){
		return;
	}
	int i = low;
	int j = high;
	FREE_BLOCK keyBlock = memeryList->free[low];
	
	while(i < j){
		while(i < j && keyBlock.size <= memeryList->free[j].size){
			j--;
		}
		memeryList->free[i] = memeryList->free[j];
		while(i < j && keyBlock.size >= memeryList->free[i].size){
			i++;
		}
		memeryList->free[j] = memeryList->free[i];
	}
	memeryList->free[i] = keyBlock;
	sortMemery(memeryList,low,high - 1);
	sortMemery(memeryList,i + 1,high);
} */

/* void sortAddr(MEMERY_LIST *memeryList,unsigned int low,unsigned int high){ //空闲内存块按地址递增快速排序
	if(low > high){
		return;
	}
	int i = low;
	int j = high;
	FREE_BLOCK keyBlock = memeryList->free[low];
	
	while(i < j){
		while(i < j && keyBlock.addr <= memeryList->free[j].addr){
			j--;
		}
		memeryList->free[i] = memeryList->free[j];
		while(i < j && keyBlock.addr >= memeryList->free[i].addr){
			i++;
		}
		memeryList->free[j] = memeryList->free[i];
	}
	memeryList->free[i] = keyBlock;
	sortAddr(memeryList,low,high - 1);
	sortAddr(memeryList,i + 1,high);
} */





