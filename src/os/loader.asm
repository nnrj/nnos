; 内核加载器
;---------------------------------------------------------------------------------------------
%include "boot.inc"
;---------------------------------------------------------------------------------------------
SECTION loader vstart=LOADER_BASE_ADDR
LOADER_START_TOP equ LOADER_BASE_ADDR
;---------------------------------------------------------------------------------------------
jmp loader_start
;---------------------------------------------------------------------------------------------
; 构建gdt及其内部描述符
;---------------------------------------------------------------------------------------------
gdt_addr:
    GDT_BASE:           dd      0x00000000
                        dd      0x00000000
    CODE_DESC:          dd      0x0000ffff
                        dd      DESC_CODE_HIGH4
    DATA_STACK_DESC:    dd      0x0000ffff
                        dd      DESC_DATA_HIGH4
    VIDEO_DESC:         dd      0x80000008
                        dd      DESC_VIDEO_HIGH4    ; 此时dpl已为0
    GDT_SIZE            equ     $ - GDT_BASE
    GDT_LIMIT           equ     GDT_SIZE - 1
    times 60 dq 0                                   ; 预留60个描述符空位
    SELECTOR_CODE       equ     (0x0001 << 3) + TI_GDT + RPL0 ; 相当于(CODE_DESC - GDT_BASE) / 8 + TI_GDT + RPL0
    SELECTOR_DATA       equ     (0x0002 << 3) + TI_GDT + RPL0
    SELECTOR_VIDEO      equ     (0x0003 << 3) + TI_GDT + RPL0

gdt_ptr                                             ; GDT指针
    dw GDT_LIMIT
    dd GDT_BASE
loadermsg db '2 loader in real.'

loader_start:
;---------------------------------------------------------------------------------------------
; int 0x10 功能号：0x13 功能描述：打印字符串 
;---------------------------------------------------------------------------------------------  
; 输入：
; AH 子功能号=13H
; BH 页码
; BL 属性（AL=00H或01H）
; CX 字符串长度
; (DH,DL)=(行,列)
; ES:BP=字符串地址
; AL=显示输出方式
;   0，字符串只含显示字符，显示属性在BL，显示后光标位置不变
;   1，字符串只含显示字符，显示属性在BL，显示后光标位置改变
;   2，字符串中含字符和显示属性，显示后光标位置不变
;   3，字符串中含字符和显示属性，显示后光标位置改变
; 无返回值
;---------------------------------------------------------------------------------------------  
    mov sp, LOADER_BASE_ADDR
    mov bp, loadermsg           ; ES:BP = 字符串地址
    mov cx, 17                  ; CX = 字符串长度
    mov ax, 0x1301              ; AH = 13, AL = 01h
    mov bx, 0x001f              ; 页号为0（BH = 0），蓝底粉字（BL = 1fh）
    mov dx, 0x1800
    int 0x10                    ; 10h号中断
;---------------------------------------------------------------------------------------------
; 准备进入保护模式
; 1 打开A20地址线
; 2 加载GDT
; 3 将cr0的pe位置1
;---------------------------------------------------------------------------------------------  
    in  al, 0x92                ; 打开A20地址线
    or  al, 0000_0010b
    out 0x92, al

    lgdt    [gdt_ptr]           ; 加载GDT

    mov eax, cr0                ; cr0第0位置1
    or  eax, 0x00000001
    mov cr0, eax
    
    jmp dword SELECTOR_CODE:p_mode_start ; 刷新流水线，避免分支预测的影响（jmp跳转将使之前的预测失效，从而起到刷新作用）

[bits 32]
p_mode_start:
    mov ax, SELECTOR_DATA
    mov ds, ax
    mov es, ax
    mov ss, ax
    mov esp, LOADER_START_TOP
    mov ax, SELECTOR_VIDEO
    mov gs, ax

    mov byte [gs:160],'P'
    
    jmp $
;---------------------------------------------------------------------------------------------
; 结束
;---------------------------------------------------------------------------------------------