; 主引导程序（MBR）
;---------------------------------------------------------------------------------------------
%include "boot.inc"
;---------------------------------------------------------------------------------------------
SECTION MBR vstart=0x7c00
	mov ax, cs
	mov ds, ax
	mov es, ax
	mov ss, ax
	mov fs, ax
	mov sp, 0x7c00
	mov ax, 0xb800
	mov gs, ax

; 清屏 利用0x06号功能，上卷全部行来清屏
;---------------------------------------------------------------------------------------------
; INT 0x10 功能号：0x06 功能描述：上卷窗口
;---------------------------------------------------------------------------------------------
; 输入：
; AH 功能号=0x06
; AL=上卷的行数（若为0，则表示全部）
; BH=上卷行属性
; (CL,CH)=窗口左上角(X,Y)位置
; (DL,DH)=窗口右下角(X,Y)位置
; 无返回值
	mov ax, 0x600
	mov bx, 0x700
	mov cx, 0	; 左下角：(0,0)
	mov dx, 0x184f	; 右下角：(80,25)，下标从0开始，故实际赋值为(79,24)
			; VGA文本模式中，一行只能容纳80个字符，共25行
	int 0x10	; int 0x10
;---------------------------------------------------------------------------------------------
; 输出背景色（绿色）、前景色（红色），并闪烁的字符串“1 MBR”
;---------------------------------------------------------------------------------------------
	mov byte [gs:0x00], '1'
	mov byte [gs:0x01], 0xa4
	mov byte [gs:0x02], ' '
	mov byte [gs:0x03], 0xa4
	mov byte [gs:0x04], 'M'
	mov byte [gs:0x05], 0xa4
	mov byte [gs:0x06], 'B'
	mov byte [gs:0x07], 0xa4
	mov byte [gs:0x08], 'R'
	mov byte [gs:0x09], 0xa4

;	jmp $
;-------------------------------------------------------------------------------------------
;-------------------------------------------------------------------------------------------
; 读取硬盘前的准备工作
;-------------------------------------------------------------------------------------------
	mov eax, LOADER_START_SECTOR ; 起始扇区LBA地址（为保证可拓展，使用eax）
	mov bx, LOADER_BASE_ADDR	; 要加载到的内存地址
	mov cx, 4 ; 待读入的扇区数（读取4个扇区，此时loader.bin已超出1字节内存大小）
	call rd_disk_m_16 ; 跳转到读取loader的代码段

	jmp LOADER_BASE_ADDR ; 硬盘第2扇区的loader已加载到内存此处，跳转到此处执行loader
;-------------------------------------------------------------------------------------------
; 读取硬盘n个扇区
;-------------------------------------------------------------------------------------------
; eax = LBA 扇区号
; bx = 要加载到的内存地址
; cx = 要读取的扇区数
rd_disk_m_16:	; 在16位模式下读硬盘
	mov esi, eax ; 备份eax
	mov di, cx ; 备份cx

; 读硬盘
; 第1步：设置要读取的扇区数
	mov dx, 0xf2 	; 选择Primary通道的Sector count端口
	mov al, cl		; 设置要读取的扇区数
	out dx, al 		; 传送到硬盘控制器

	mov eax, esi 	; 恢复eax
; 第2步：将LBA地址存入0x1f3~0x1f6
	; LBA第7~0位写入端口0x1f3
	mov dx, 0x1f3
	out dx, al

	; LBA第15~8位写入端口0x1f4
	mov cl, 8 		; cl设置为8
	shr eax, cl 	; eax的内容右移8位，以设置15~8
	mov dx, 0x1f4	
	out dx, al

	; LBA第23~16位写入端口0x1f5
	shr eax, cl 	; eax的内容右移8位，以设置23~16
	mov dx, 0x1f5
	out dx, al

	; LBA第27~24位写入端口0x1f6的低4位
	shr eax, cl 	; eax的内容右移8位，以设置27~24
	and al, 0x0f	; al高4位清零，低4位保持原貌，即低4位设置为000（值来自eax）
	or al, 0xe0		; al高3位，即7~4位设置为1110
	mov dx, 0x1f6
	out dx, al
; 第3步：向0x1f7端口写入读命令
	mov dx, 0x1f7
	mov al, 0x20	; 读命令
	out dx, al

; 第4步；检测硬盘状态
; 同一端口，写时表示写入命令，读时表示读入硬盘状态
	.not_ready:
	nop 			; 跳空，什么也不做，但占用一个周期。旨在增加延迟，相当于sleep，减少对硬盘工作的打扰
	in al, dx		; 检测0x1f7端口，此时读操作，0x1f7为status寄存器
	and al, 0x88	; 仅保留第4位和第7位。第4位为1表示硬盘控制器已准备好数据；第7位位1表示硬盘忙
	cmp al, 0x08	; 与00001000比较，判断第4位是否为1
	jnz .not_ready	; 若第4位不为1，则未准备好，继续等待

; 第5步：从0x1f0端口读数据
	mov ax, di		; 要读取的扇区数存入ax，每个扇区512字节，每次读入一个字（data寄存器为16位，应该是每次读入2个字吧）
	mov dx, 256		; 共需di * 512 / 2 次，故用di * 256
	mul dx			; 乘数为dx，被乘数隐含在ax中（作8位乘时，隐含在al中），乘积的高16位存于dx，低15位存于ax
	mov cx, ax		; 计算所得需要循环读取data寄存器的次数，存入cx
	
; 开始读取
	mov dx, 0x1f0
	.go_on_read:
		in ax, dx
		mov [bx], ax
		add bx, 2
		loop .go_on_read
		ret
;-------------------------------------------------------------------------------------------
;用0填充剩余空间，以凑够512B
;-------------------------------------------------------------------------------------------
	times 510-($-$$) db 0 ; 结尾的0xaa55占用两个字节，故此处用510计算，当前行-段起始
;-------------------------------------------------------------------------------------------
;引导程序标识
;-------------------------------------------------------------------------------------------
	db 0x55,0xaa
;-------------------------------------------------------------------------------------------
;结束
;-------------------------------------------------------------------------------------------